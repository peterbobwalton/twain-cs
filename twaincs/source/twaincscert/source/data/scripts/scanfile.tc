;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Scanfile
;   Scan with DAT_IMAGEFILEXFER...
;
; Arguments
;   arg:1 - TW_IDENTITY.ProductName of scanner to test
;   arg:2 - dsmload argument
;   arg:3 - dsmload argument
;   arg:4 - dsmload argument
;   arg:5 - dsmload argument
;   arg:6 - dsmload argument
;   arg:7 - dsmload argument
;   arg:8 - dsmload argument
;   arg:9 - dsmload argument
;   arg:10 - dsmload argument
;   arg:11 - dsmload argument
;   arg:12 - dsmload argument
;
; Globals
;   g_twextimageinfo - extended image info
;
; Locals
;   cap_supportedcaps - list of supported capabilities
;   icap_supportedextimageinfo - list of supported extending image info values
;   image.count - count of images, starting at 1
;   image.folder - location of the images
;   twainstate - pass/fail result of all tests
;
; Returns
;   pass or fail
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Init stuff...
;
run 'LoadTables'
setlocal cap_supportedcaps ''
setlocal icap_supportedextimageinfo ''
setlocal image.count '0'
setlocal twainstate '0'
setlocal image.folder '${folder:data}/images'
setglobal g_twextimageinfo ''
image cleanfolder '${get:image.folder}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Load and open the DSM...
;
setlocal twainstate '1'
dsmload '${arg:2}' '${arg:3}' '${arg:4}' '${arg:5}' '${arg:6}' '${arg:7}' '${arg:8}' '${arg:9}' '${arg:10}' '${arg:11}' '${arg:12}'
echo.progress 'dsmload ${arg:2} ${arg:3} ${arg:4} ${arg:5} ${arg:6} ${arg:7} ${arg:8} ${arg:9} ${arg:10} ${arg:11} ${arg:12}' '${sts:}'
setlocal twainstate '2'
dsmentry src null dg_control dat_parent msg_opendsm hwnd
echo.progress 'parent/opendsm' '${sts:}'
if '${sts:}' != 'SUCCESS' goto MAIN.FAIL
setlocal twainstate '3'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If the DF_APP2|DF_DSM2 flag is set, then call DAT_ENTRYPOINT...
;
if '${app:${get:TW_IDENTITY.SupportedGroups}}' & '0x30000000' != '0x30000000' goto MAIN.ENTRYPOINT.SKIP
dsmentry src null dg_control dat_entrypoint msg_get '0,0,0,0,0,0'
echo.progress 'entrypoint/get' '${sts:} - ${ret:}'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR
:MAIN.ENTRYPOINT.SKIP



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Open the driver...
;
dsmentry src null dg_control dat_identity msg_opends '0,0,0,0,0,,0,0,0x0,,,${arg:1}'
setlocal twidentity '${ret:}'
echo.progress 'identity/opends' '${sts:} - ${get:twidentity}'
if '${sts:}' != 'SUCCESS' goto MAIN.FAIL
setlocal twainstate '4'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get CAP_SUPPORTEDCAPS...
;
dsmentry src ds dg_control dat_capability msg_get 'CAP_SUPPORTEDCAPS'
echo.progress 'capability/get' '${sts:} - ${ret:}'
if '${sts:}' != 'SUCCESS' goto MAIN.FAIL
setlocal cap_supportedcaps '${ret:}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set CAP_INDICATORS to TRUE...
;
dsmentry src ds dg_control dat_capability msg_set 'CAP_INDICATORS,TWON_ONEVALUE,TWTY_BOOL,TRUE'
echo.progress 'capability/set' '${sts:} - ${ret:}'
if '${sts:}' != 'SUCCESS' goto MAIN.FAIL



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set ICAP_XFERMECH to TWSX_FILE...
;
dsmentry src ds dg_control dat_capability msg_set 'ICAP_XFERMECH,TWON_ONEVALUE,TWTY_UINT16,TWSX_FILE'
echo.progress 'capability/set' '${sts:} - ${ret:}'
if '${sts:}' != 'SUCCESS' goto MAIN.FAIL



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get ICAP_SUPPORTEDEXTIMAGEINFO (we just want the array portion)...
;
if '${get:cap_supportedcaps}' !~contains 'ICAP_SUPPORTEDEXTIMAGEINFO' goto MAIN.SKIPICAPSUPPORTEDEXTIMAGEINFO
dsmentry src ds dg_control dat_capability msg_get 'ICAP_SUPPORTEDEXTIMAGEINFO'
echo.progress 'capability/get' '${sts:} - ${ret:}'
if '${sts:}' != 'SUCCESS' goto MAIN.FAIL
setlocal ienum '4'
setlocal comma ''
:MAIN.NEXTEXTIMAGEINFO
if '${ret:${get:ienum}}' == '' goto MAIN.SKIPICAPSUPPORTEDEXTIMAGEINFO
setlocal icap_supportedextimageinfo '${get:icap_supportedextimageinfo}${get:comma}${ret:${get:ienum}}'
increment ienum '${get:ienum}' 1
setlocal comma ','
goto MAIN.NEXTEXTIMAGEINFO
:MAIN.SKIPICAPSUPPORTEDEXTIMAGEINFO



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start scanning...
;
wait reset
dsmentry src ds dg_control dat_userinterface msg_enableds '0,0'
echo.progress 'userinterface/enableds' '${sts:} - ${ret:}'
if '${sts:}' != 'SUCCESS' goto MAIN.FAIL
setlocal twainstate '5'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Wait for MSG_XFERREADY, if we don't see it then scoot...
;
wait 30000
echo.progress 'wait' '${ret:}'
if '${ret:}' !~contains 'msg_xferready' goto MAIN.PASS



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get information about the image...
;
:MAIN.NEXTIMAGEINFO
setlocal twainstate '6'
dsmentry src ds dg_image dat_imageinfo msg_get '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0'
echo.progress 'imageinfo/get' '${sts:} - ${ret:}'
if '${sts:}' != 'SUCCESS' goto MAIN.FAIL
setlocal twimageinfo.compression '${ret:${get:index.twimageinfo.compression}}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set up the file transfer...
;
increment image.count '${get:image.count}' 1
if '${get:twimageinfo.compression}' == 'JPEG' goto MAIN.JPEG
setlocal twsetupfilexfer.filename '${get:image.folder}/img${format:D6|${get:image.count}}.tif'
setlocal twsetupfilexfer.format 'TWFF_TIFF'
goto MAIN.SETUPFILEXFER
:MAIN.JPEG
setlocal twsetupfilexfer.filename '${get:image.folder}/img${format:D6|${get:image.count}}.jpg'
setlocal twsetupfilexfer.format 'TWFF_JFIF'
:MAIN.SETUPFILEXFER
dsmentry src ds dg_control dat_setupfilexfer msg_set '"${get:twsetupfilexfer.filename}",${get:twsetupfilexfer.format},0'
echo.progress 'setupfilexfer/get' '${sts:} - ${ret:}'
if '${sts:}' != 'SUCCESS' goto MAIN.FAIL



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Transfer the image...
;
dsmentry src ds dg_image dat_imagefilexfer msg_get null
echo.progress 'imagefilexfer/get' '${sts:}'
if '${sts:}' != 'XFERDONE' goto MAIN.FAIL
setlocal twainstate '7'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get more info about the image (if we can)...
;
if '${get:icap_supportedextimageinfo}' == '' goto MAIN.SKIPEXTIMAGEINFO
run 'extimageinfo' 'g_twextimageinfo' '${get:icap_supportedextimageinfo}'
if '${ret:}' != 'pass' goto MAIN.FAIL
:MAIN.SKIPEXTIMAGEINFO



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; End the transfer, see if we're done...
;
dsmentry src ds dg_control dat_pendingxfers msg_endxfer '0,0'
echo.progress 'pendingxfers/endxfer' '${sts:} - ${ret:}'
if '${sts:}' != 'SUCCESS' goto MAIN.FAIL
if '${ret:${get:TW_PENDINGXFERS.Count}}' != '0' goto MAIN.NEXTIMAGEINFO
setlocal twainstate '5'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We've passed...
;
:MAIN.PASS
setlocal main.result pass
goto MAIN.EXIT



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We've run into a problem...
;
:MAIN.FAIL
echo.progress 'ERROR' '${sts:}'
setlocal main.result fail
goto MAIN.EXIT



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Rewind the driver, close and unload the DSM, return...
;
:MAIN.EXIT
call TWAIN.REWIND '${get:twainstate}' '${get:twidentity}'
return '${get:main.result}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: Rewind from any TWAIN state...
; arg:1 - twainstate
; arg:2 - twidentity
; returns: (nothing)
;
:TWAIN.REWIND
;
setlocal twainstate '${arg:1}'
if '${get:twainstate}' < '7' goto REWIND.6
dsmentry src ds dg_control dat_pendingxfers msg_endxfer '0,0'
echo.progress 'pendingxfers/endxfer' '${sts:}'
setlocal twainstate '6'
:REWIND.6
if '${get:twainstate}' < '6' goto REWIND.5
dsmentry src ds dg_control dat_pendingxfers msg_reset '0,0'
echo.progress 'pendingxfers/reset' '${sts:}'
setlocal twainstate '5'
:REWIND.5
if '${get:twainstate}' < '5' goto REWIND.4
dsmentry src ds dg_control dat_userinterface msg_disableds '0,0'
echo.progress 'userinterface/disableds' '${sts:}'
setlocal twainstate '4'
:REWIND.4
if '${get:twainstate}' < '4' goto REWIND.3
dsmentry src null dg_control dat_identity msg_closeds '${arg:2}'
echo.progress 'identity/closeds' '${sts:}'
setlocal twainstate '3'
:REWIND.3
if '${get:twainstate}' < '3' goto REWIND.2
dsmentry src null dg_control dat_parent msg_closedsm hwnd
echo.progress 'parent/closedsm' '${sts:}'
setlocal twainstate '2'
:REWIND.2
if '${get:twainstate}' < '2' goto REWIND.1
dsmunload
echo 'dsmunload'
setlocal twainstate '1'
:REWIND.1
return ${get:twainstate}'
