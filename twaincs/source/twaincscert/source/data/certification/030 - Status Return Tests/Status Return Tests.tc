;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Status Return Tests
;   Confirm that the expected status return is reported by certain operations.
;
; Arguments
;   arg:1 - TW_IDENTITY.ProductName of scanner to test
;   arg:2 - global to set on fail
;
; Globals
;   g_value - data return from dsmentry call
;
; Locals
;   certifyresult - global to report back on fail
;
; Returns
;   pass or fail
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize...
;
setlocal certifyresult '${arg:2}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Prompt the user...
;
if '${get:g_skipprompts}' != '' goto MAIN.SKIP.PROMPTS
echo.prompt
echo.prompt '*** DO NOT CLICK ON THE TWAIN USER INTERFACE WHEN IT COMES UP ***'
echo.prompt 'We are checking that the driver works correctly in state 5.'
echo.prompt 'When done the TWAIN user interface will exit on its own.'
echo.prompt
pause '(press the ENTER key when ready to continue)'
echo.prompt
:MAIN.SKIP.PROMPTS



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DAT_IMAGELAYOUT
; Confirm that DAT_IMAGELAYOUT returns the correct status
; in various error conditions.  We're doing tests in state 5
; so we need the driver's user interface...
;
call SENDANDCHECK SUCCESS  '${get:certifyresult}' discard dg_control dat_userinterface msg_enabledsuionly  '1,0'
sleep 5000 ; give the ui time to come up, we want to make sure we're really in state 5
call SENDANDCHECK SUCCESS  '${get:certifyresult}' g_value dg_image   dat_imagelayout   msg_get        '0,0,0,0,0,0,0'
call SENDANDCHECK SEQERROR '${get:certifyresult}' discard dg_image   dat_imagelayout   msg_set        '${get:g_value}'
call SENDANDCHECK SEQERROR '${get:certifyresult}' discard dg_image   dat_imagelayout   msg_reset      '0,0,0,0,0,0,0'
call SENDANDCHECK SUCCESS  '${get:certifyresult}' discard dg_control dat_userinterface msg_disableds  '0,0'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DAT_IMAGEMEMXFER
; Confirm that DAT_IMAGEMEMXFER returns the correct status
; in various error conditions.
;
call SENDANDCHECK BADPROTOCOL '${get:certifyresult}' discard dg_image dat_imagememxfer msg_set '0,0,0,0,0,0,0,9,0,0'
call SENDANDCHECK SEQERROR    '${get:certifyresult}' discard dg_image dat_imagememxfer msg_get '0,0,0,0,0,0,0,9,0,0'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DAT_IMAGENATIVEXFER
; Confirm that DAT_IMAGENATIVEXFER returns the correct status
; in various error conditions.
;
call SENDANDCHECK BADPROTOCOL '${get:certifyresult}' discard dg_image dat_imagenativexfer msg_set '0'
call SENDANDCHECK SEQERROR    '${get:certifyresult}' discard dg_image dat_imagenativexfer msg_get '0'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; All done...
;
return 'pass' ; caller figures out what really happened based on certifyresult...



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: SENDANDCHECK
; arg:1 - expected status
; arg:2 - status to return
; arg:3 - data to return
; arg:4 - DG to send
; arg:5 - DAT to send 
; arg:6 - MSG to send 
; arg:7 - TW_MEMREF to send 
; returns: (none)
;
:SENDANDCHECK
dsmentry src ds '${arg:4}' '${arg:5}' '${arg:6}' '${arg:7}'
if '${sts:}' != '${arg:1}' goto SENDANDCHECK.ERROR.ECHOPASSFAIL
echo.passfail '${arg:5}/${arg:6} --> ${arg:1}' 'pass'
setglobal '${arg:3}' '${ret:}'
return
:SENDANDCHECK.ERROR.ECHOPASSFAIL
echo.passfail '${arg:5}/${arg:6} --> ${arg:1}' 'fail ${sts:} ${ret:}'
setglobal '${arg:2}' 'fail'
return
