;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Verify Values for MSG_OPENDS, MSG_RESET, and MSG_RESETALL
;   Confirm that the indicated capabilities have the values required by the Specification
;   after aDG_CONTROL / DAT_CAPABILITY / MSG_RESETALL is applied to the entire driver, or
;   a DG_CONTROL / DAT_CAPABILITY / MSG_RESET is applied to a single capability.  Also,
;   confirm those capabilities that have mandatory values after MSG_OPENDS.
;
; Arguments
;   arg:1 - TW_IDENTITY.ProductName of scanner to test
;   arg:2 - global to set on fail
;
; Globals
;   (none)
;
; Locals
;   twidentity.productname - product name of scanner to test
;   certifyresult - global to set on fail
;   xfermech - result of getting ICAP_XFERMECH
;
; Returns
;   (none)
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize stuff, load tables if not already done for us...
;
echo.titlesuite 'Verify Values for MSG_OPENDS, MSG_RESET, and MSG_RESETALL v1.0 02-Mar-2020'
setlocal twidentity.productname '${arg:1}'
setlocal certifyresult '${arg:2}'
if '${get:TW_ARRAY.ItemType}' != '' goto MAIN.LOADTABLES.SKIP
run '${folder:certification}/LoadTables'
:MAIN.LOADTABLES.SKIP



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Run the tests...
;
call CERTIFY 'MSG_OPENDS'   '${get:twidentity.productname}' '${get:certifyresult}'
if '${get:${get:certifyresult}}' == 'fail' goto MAIN.RETURN
call CERTIFY 'MSG_RESET'    '${get:twidentity.productname}' '${get:certifyresult}'
call CERTIFY 'MSG_RESETALL' '${get:twidentity.productname}' '${get:certifyresult}'
:MAIN.RETURN
return



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: Certify
; arg:1 - script to run
; arg:2 - TW_IDENTITY.ProductName of scanner to test
; arg:3 - global value to update on fail
; arg:4 - xfermech values
; returns: (none)
;
:CERTIFY
;
run '${arg:1}' '${arg:2}' '${arg:3}' '${arg:4}'
if '${ret:}' != 'pass' goto CERTIFY.FAIL
return 'pass'
;
:CERTIFY.FAIL
setglobal '${arg:3}' 'fail'
return 'fail'
