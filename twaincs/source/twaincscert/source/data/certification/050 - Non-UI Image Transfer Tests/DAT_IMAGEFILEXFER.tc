;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DAT_IMAGEFILEXFER
;   This test issues multiple image transfer sessions using DAT_IMAGEFILEXFER. It is performed
;   for all available image sources (unspecified, flatbed and/or ADF). Only one image is transferred
;   per session.
;
;   We follow the capability ordering, so the loops take the form:
;   set ICAP_XFERMECH TWSX_FILE
;   foreach CAP_FEEDERENABLED
;     foreach ICAP_PIXELTYPE
;       scan
;     end
;   end
;
; Arguments
;   arg:1 - TW_IDENTITY.ProductName of scanner to test
;   arg:2 - global for us to update on failure
;   arg:3 - value of ShowUI (TRUE or FALSE)
;   arg:4 - test name for the image folder
;   arg:5 - result of a MSG_GET on ICAP_XFERMECH
;
; Globals
;   (none)
;
; Locals
;   name - current test being done
;   indent - indent the passfail text
;   twimageinfo.compression - compression for current image
;   showui - value of showui
;
;   image.count - count of images from 1
;   image.folder - folder to put the images in
;   image.prefix - adf or fb
;
;   feederenabled.list - scanner's feederenabled values
;   feederenabled.index - index of feederenabled values
;   feederenabled.value - current feederenabled value
;
;   pixeltype.list - scanner's pixeltype values for this feederenabled
;   pixeltype.index - index of pixeltype values
;   pixeltype.value - current pixeltype value
;
; Returns
;   pass or fail
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If not supported, quietly leave...
;
if '${arg:5}' ~contains 'TWSX_FILE' goto MAIN.CONTINUE
return 'pass'
:MAIN.CONTINUE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize...
;
echo.titletest 'DAT_IMAGEFILEXFER'
setlocal indent ''
setlocal image.count '0'
setlocal image.folder '${folder:certimages}/${arg:4}/DAT_IMAGEFILEXFER'
setlocal image.prefix 'fb'
setlocal image.showname ''
setlocal showui '${arg:3}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Clean the image folder for this test...
;
image cleanfolder '${get:image.folder}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MSG_RESETALL
; If return code is not TWRC_SUCCESS, end with an error
;
setlocal name 'MSG_RESETALL'
dsmentry src ds dg_control dat_capability msg_resetall '0,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get and set ICAP_XFERMECH...
;
setlocal name 'ICAP_XFERMECH MSG_GET'
dsmentry src ds dg_control dat_capability msg_get 'ICAP_XFERMECH,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
if '${ret:}' !~contains 'TWSX_FILE' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
setlocal name 'ICAP_XFERMECH MSG_SET TWSX_FILE'
dsmentry src ds dg_control dat_capability msg_set 'ICAP_XFERMECH,TWON_ONEVALUE,TWTY_UINT16,TWSX_FILE'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get CAP_FEEDERENABLED, and loop so we test all values
; for the current ICAP_XFERMECH setting.
;
setlocal name 'CAP_FEEDERENABLED MSG_GET'
dsmentry src ds dg_control dat_capability msg_get 'CAP_FEEDERENABLED,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
setlocal feederenabled.list '${ret:}' ; what the scanner told us
setlocal feederenabled.index '${get:TW_ENUMERATION.ItemList}' ; point to itemlist
increment feederenabled.index '${get:feederenabled.index}' -1 ; less 1
;
:MAIN.FEEDERENABLED.NEXT
setlocal indent ''
setlocal image.count '0' ; reset count to 0
increment feederenabled.index '${get:feederenabled.index}' 1 ; next itemlist
setlocal feederenabled.value '${getindex:feederenabled.list:${get:feederenabled.index}}' ; get the value
if '${get:feederenabled.value}' == '' goto MAIN.PASS ; we've passed all tests!!!
;
setlocal name 'CAP_FEEDERENABLED MSG_SET ${get:feederenabled.value}'
dsmentry src ds dg_control dat_capability msg_set 'CAP_FEEDERENABLED,TWON_ONEVALUE,TWTY_BOOL,${get:feederenabled.value}'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
if '${get:feederenabled.value}' ~~ 'FALSE' goto MAIN.FEEDERENABLED.SETFB
setlocal image.prefix 'adf'
goto MAIN.FEEDERENABLED.SETDONE
:MAIN.FEEDERENABLED.SETFB
setlocal image.prefix 'fb'
:MAIN.FEEDERENABLED.SETDONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get ICAP_PIXELTYPE, and loop so we test all values for
; the current CAP_FEEDERENABLED setting.
;
setlocal indent '  '
setlocal name 'ICAP_PIXELTYPE MSG_GET'
dsmentry src ds dg_control dat_capability msg_get 'ICAP_PIXELTYPE,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
setlocal pixeltype.list '${ret:}' ; what the scanner told us
setlocal pixeltype.index '${get:TW_ENUMERATION.ItemList}' ; point to itemlist
increment pixeltype.index '${get:pixeltype.index}' -1 ; less 1
;
:MAIN.PIXELTYPE.NEXT
setlocal indent '  '
increment pixeltype.index '${get:pixeltype.index}' 1 ; next itemlist
setlocal pixeltype.value '${getindex:pixeltype.list:${get:pixeltype.index}}' ; get the value
if '${get:pixeltype.value}' == '' goto MAIN.FEEDERENABLED.NEXT ; pixeltypes done for this feederenabled
;
setlocal name 'ICAP_PIXELTYPE MSG_SET ${get:pixeltype.value}'
dsmentry src ds dg_control dat_capability msg_set 'ICAP_PIXELTYPE,TWON_ONEVALUE,TWTY_UINT16,${get:pixeltype.value}'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If we're a flatbed, we can start scanning...
;
setlocal indent '    '
if '${get:feederenabled.value}' ~~ 'FALSE' goto MAIN.USERINTERFACE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Check for paper in the feeder...
;
dsmentry src ds dg_control dat_capability msg_getcurrent 'CAP_FEEDERLOADED,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.FEEDERLOADED.DONE
if '${ret:${get:TW_ONEVALUE.Item}}' ~~ 'TRUE' goto MAIN.FEEDERLOADED.DONE
echo.prompt
echo.prompt "Place paper in the scanner's feeder."
pause '(press the ENTER key when ready to continue)'
:MAIN.FEEDERLOADED.DONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start scanning...
;
:MAIN.USERINTERFACE
setlocal name 'dg_control/dat_userinterface/msg_enableds'
wait reset
dsmentry src null dg_control dat_userinterface msg_enableds '${get:showui},0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Wait for MSG_XFERREADY, if we don't see it then scoot...
;
setlocal name 'wait ${get:sys_waittimeout} seconds for MSG_XFERREADY'
wait '${get:sys_waittimeout}000'
if '${ret:}' !~contains 'msg_xferready' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get information about the image...
;
:MAIN.IMAGEINFO.NEXT
setlocal name 'dg_image/dat_imageinfo/msg_get'
dsmentry src ds dg_image dat_imageinfo msg_get '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
setlocal twimageinfo.compression '${ret:${get:index.twimageinfo.compression}}'
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set up the file transfer...
;
increment image.count '${get:image.count}' 1
if '${get:twimageinfo.compression}' == 'JPEG' goto MAIN.SETUPFILEXFER.JPEG
setlocal image.showname 'DAT_IMAGEFILEXFER/${get:image.prefix}${format:D6|${get:image.count}}.tif'
setlocal twsetupfilexfer.filename '${get:image.folder}/${get:image.prefix}${format:D6|${get:image.count}}.tif'
setlocal twsetupfilexfer.format 'TWFF_TIFF'
goto MAIN.SETUPFILEXFER
:MAIN.SETUPFILEXFER.JPEG
setlocal image.showname 'DAT_IMAGEFILEXFER/${get:image.prefix}${format:D6|${get:image.count}}.jpg'
setlocal twsetupfilexfer.filename '${get:image.folder}/${get:image.prefix}${format:D6|${get:image.count}}.jpg'
setlocal twsetupfilexfer.format 'TWFF_JFIF'
:MAIN.SETUPFILEXFER
setlocal name 'dg_control/dat_setupfilexfer/msg_set'
dsmentry src ds dg_control dat_setupfilexfer msg_set '"${get:twsetupfilexfer.filename}",${get:twsetupfilexfer.format},0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Transfer the image...
;
setlocal name 'dg_image/dat_imagefilexfer/msg_get'
dsmentry src ds dg_image dat_imagefilexfer msg_get null
if '${sts:}' != 'XFERDONE' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
echo.passfail '${get:indent}image <${get:image.showname}>' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; End the transfer, see if we're done...
;
setlocal name 'dg_control/dat_pendingxfers/msg_endxfer'
dsmentry src ds dg_control dat_pendingxfers msg_endxfer '0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
if '${ret:${get:TW_PENDINGXFERS.Count}}' != '0' goto MAIN.IMAGEINFO.NEXT



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We're out of images, so disable and go back up to
; do the next ICAP_PIXELTYPE...
;
setlocal name 'dg_control/dat_userinterface/msg_disableds'
dsmentry src ds dg_control dat_userinterface msg_disableds '0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
goto MAIN.PIXELTYPE.NEXT



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Summary and cleanup...
;
; We passed...
:MAIN.PASS
echo.passfail 'SUMMARY' 'pass'
return 'pass'
;
; Ruh-roh...
:MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'fail - ${sts:} ${ret:}'
echo.passfail 'SUMMARY' 'fail'
setglobal '${arg:2}' 'fail'
return 'fail'
