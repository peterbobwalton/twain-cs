;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DAT_IMAGEMEMXFER
;   This test sets CAP_XFERCOUNT to 0, 1 and -1 for a flatbed scanner. It expects an error for the
;   value 0, and only one image to be transferred per scanning session for the values 1 and -1.
;
;   We follow the capability ordering, so the loops take the form:
;   set ICAP_XFERMECH TWSX_MEMORY
;   foreach CAP_FEEDERENABLED
;     foreach ICAP_PIXELTYPE
;       scan
;     end
;   end
;
; Arguments
;   arg:1 - TW_IDENTITY.ProductName of scanner to test
;   arg:2 - global for us to update on failure
;   arg:3 - value of ShowUI (TRUE or FALSE)
;   arg:4 - test name for the image folder
;
; Globals
;   (none)
;
; Locals
;   name - current test being done
;   indent - indent the passfail text
;   imageinfo - metadata for the current image
;   imagememxfer - result of DAT_IMAGEMEMXFER call
;   setupmemxfer.preferred - preferred field from DAT_SETUPMEMXFER call
;
;   image.count - count of images from 1
;   image.folder - folder to put the images in
;   image.folderone - path for CAP_XFERCOUNT=1 test
;   image.folderall - path for CAP_XFERCOUNT=-1 test
;   image.prefix - adf or fb
;   image.testcount - count of images from 0 for a specific test
;
;   feederenabled.list - scanner's feederenabled values
;   feederenabled.index - index of feederenabled values
;   feederenabled.value - current feederenabled value
;
;   pixeltype.list - scanner's pixeltype values for this feederenabled
;   pixeltype.index - index of pixeltype values
;   pixeltype.value - current pixeltype value
;
; Returns
;   pass or fail
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize...
;
echo.titletest 'DAT_IMAGEMEMXFER'
setlocal indent ''
setlocal image.pointer '0'
setlocal image.count '0'
setlocal image.folder ''
setlocal image.folderone '${folder:certimages}/${arg:4}/DAT_IMAGEMEMXFER/one'
setlocal image.folderall '${folder:certimages}/${arg:4}/DAT_IMAGEMEMXFER/all'
setlocal image.prefix 'fb'
setlocal image.testcount '1'
setlocal showui '${arg:3}'
setlocal xfercount.test '0'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Prompt the user, if they have an ADF...
;
if '${get:g_skipprompts}' != '' goto MAIN.SKIP.PROMPTS
dsmentry src ds dg_control dat_capability msg_get 'CAP_FEEDERENABLED,0,0,0'
if '${ret:}' !~contains 'TRUE' goto MAIN.SKIP.PROMPTS
echo.prompt
echo.prompt "Scanning will take place during this test.  There will be no"
echo.prompt "need to press any button on the TWAIN user interface to start"
echo.prompt "the scanner.  A progress indicator may appear during scanning."
echo.prompt
echo.prompt "Place at least 3 sheets of paper in the scanner's feeder."
pause '(press the ENTER key when ready to continue)'
echo.prompt
:MAIN.SKIP.PROMPTS



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Clean the image folder for this test...
;
image cleanfolder '${get:image.folderone}'
image cleanfolder '${get:image.folderall}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MSG_RESETALL
; If return code is not TWRC_SUCCESS, end with an error
;
setlocal name 'MSG_RESETALL'
dsmentry src ds dg_control dat_capability msg_resetall '0,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get and set ICAP_XFERMECH...
;
setlocal name 'ICAP_XFERMECH MSG_GET'
dsmentry src ds dg_control dat_capability msg_get 'ICAP_XFERMECH,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
if '${ret:}' !~contains 'TWSX_MEMORY' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
setlocal name 'ICAP_XFERMECH MSG_SET TWSX_MEMORY'
dsmentry src ds dg_control dat_capability msg_set 'ICAP_XFERMECH,TWON_ONEVALUE,TWTY_UINT16,TWSX_MEMORY'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get CAP_FEEDERENABLED, and loop so we test all values
; for the current ICAP_XFERMECH setting.
;
setlocal name 'CAP_FEEDERENABLED MSG_GET'
dsmentry src ds dg_control dat_capability msg_get 'CAP_FEEDERENABLED,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
setlocal feederenabled.list '${ret:}' ; what the scanner told us
setlocal feederenabled.index '${get:TW_ENUMERATION.ItemList}' ; point to itemlist
increment feederenabled.index '${get:feederenabled.index}' -1 ; less 1
;
:MAIN.FEEDERENABLED.NEXT
setlocal indent ''
setlocal xfercount.test '0' ; reset the tests
increment feederenabled.index '${get:feederenabled.index}' 1 ; next itemlist
setlocal feederenabled.value '${getindex:feederenabled.list:${get:feederenabled.index}}' ; get the value
if '${get:feederenabled.value}' == '' goto MAIN.PASS ; we've passed all tests!!!
;
setlocal name 'CAP_FEEDERENABLED MSG_SET ${get:feederenabled.value}'
dsmentry src ds dg_control dat_capability msg_set 'CAP_FEEDERENABLED,TWON_ONEVALUE,TWTY_BOOL,${get:feederenabled.value}'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
if '${get:feederenabled.value}' ~~ 'FALSE' goto MAIN.FEEDERENABLED.SETFB
setlocal image.prefix 'adf'
goto MAIN.FEEDERENABLED.SETDONE
:MAIN.FEEDERENABLED.SETFB
setlocal image.prefix 'fb'
:MAIN.FEEDERENABLED.SETDONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Dispatch to the CAP_XFERCOUNT test we want to run...
;
:MAIN.XFERCOUNT.NEXT
setlocal indent '  '
increment xfercount.test '${get:xfercount.test}' 1
if '${get:xfercount.test}' == '1' goto MAIN.XFERCOUNT.TEST1
if '${get:xfercount.test}' == '2' goto MAIN.XFERCOUNT.TEST2
if '${get:xfercount.test}' == '3' goto MAIN.XFERCOUNT.TEST3
goto MAIN.FEEDERENABLED.NEXT ; we're done test with this paper source, go to the next one



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set CAP_XFERCOUNT to 0...
;
:MAIN.XFERCOUNT.TEST1
setlocal name 'CAP_XFERCOUNT == 0'
dsmentry src ds dg_control dat_capability msg_set 'CAP_XFERCOUNT,TWON_ONEVALUE,TWTY_INT16,0'
if '${sts:}' == 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
goto MAIN.XFERCOUNT.NEXT



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set CAP_XFERCOUNT to 1...
;
:MAIN.XFERCOUNT.TEST2
setlocal name 'CAP_XFERCOUNT == 1'
dsmentry src ds dg_control dat_capability msg_set 'CAP_XFERCOUNT,TWON_ONEVALUE,TWTY_INT16,1'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal image.folder '${get:image.folderone}'
goto MAIN.FEEDERLOADED



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set CAP_XFERCOUNT to -1...
;
:MAIN.XFERCOUNT.TEST3
setlocal name 'CAP_XFERCOUNT == -1'
dsmentry src ds dg_control dat_capability msg_set 'CAP_XFERCOUNT,TWON_ONEVALUE,TWTY_INT16,-1'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal image.folder '${get:image.folderall}'
goto MAIN.FEEDERLOADED



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Check for paper in the feeder, skip for a flatbed...
;
:MAIN.FEEDERLOADED
if '${get:feederenabled.value}' ~~ 'FALSE' goto MAIN.FEEDERLOADED.DONE
dsmentry src ds dg_control dat_capability msg_getcurrent 'CAP_FEEDERLOADED,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.FEEDERLOADED.DONE
if '${ret:${get:TW_ONEVALUE.Item}}' ~~ 'TRUE' goto MAIN.FEEDERLOADED.DONE
echo.prompt
echo.prompt "Place paper in the scanner's feeder."
pause '(press the ENTER key when ready to continue)'
:MAIN.FEEDERLOADED.DONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get the preferred size for memory transfers, and allocate
; a pointer for the memory transfers...
;
setlocal indent '    '
setlocal name 'dg_control/dat_setupmemxfer/msg_get'
dsmentry src ds dg_control dat_setupmemxfer msg_get '0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
setlocal name 'TW_SETUPMEMXFER.Preferred > 0'
setlocal setupmemxfer.preferred '${ret:${get:TW_SETUPMEMXFER.Preferred}}'
if '${get:setupmemxfer.preferred}' <= '0' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
setlocal name 'allocate pointer for ${get:setupmemxfer.preferred} bytes'
free pointer image.pointer ; for the last loop
allocate pointer image.pointer '${get:setupmemxfer.preferred}'
if '${get:image.pointer}' == '0' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start scanning...
;
:MAIN.USERINTERFACE
setlocal indent '    '
setlocal name 'dg_control/dat_userinterface/msg_enableds'
setlocal image.testcount '1' ; reset to 1
wait reset
dsmentry src null dg_control dat_userinterface msg_enableds '${get:showui},0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Wait for MSG_XFERREADY, if we don't see it then scoot...
;
setlocal name 'wait ${get:sys_waittimeout} seconds for MSG_XFERREADY'
wait '${get:sys_waittimeout}000'
if '${ret:}' !~contains 'msg_xferready' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Do a memory transfer...
; This little song and dance with the states is so that we can
; start the transfer in state 6 with each new image, but switch
; to state 7 if we need multiple calls to capture the current
; image...
;
; The saved images will be in TIFF format, which includes TIFF
; JPEG (the better form, where a simple TIFF header is added).
;
increment image.count '${get:image.count}' 1
image free memimage
;
:MAIN.IMAGEMEMXFER.NEXT
setlocal name 'dg_image/dat_imagememxfer/msg_get'
dsmentry src ds dg_image dat_imagememxfer msg_get '0,0,0,0,0,0,0,9,${get:setupmemxfer.preferred},${get:image.pointer}'
setlocal imagememxfer '${ret:}'
if '${sts:}' == 'XFERDONE' goto MAIN.IMAGEMEMXFER.XFERDONE
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
;
echo.passfail '${get:indent}${get:name} SUCCESS' 'pass'
image append memimage '${get:imagememxfer}'
goto MAIN.IMAGEMEMXFER.NEXT
;
:MAIN.IMAGEMEMXFER.XFERDONE
echo.passfail '${get:indent}${get:name} XFERDONE' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We need image info to make sense of this data...
;
setlocal name 'dg_image/dat_imageinfo/msg_get'
dsmentry src ds dg_image dat_imageinfo msg_get '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0'
setlocal imageinfo '${ret:}'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Save the image...
;
image append memimage '${get:imagememxfer}'
image addheader memimage '${get:imageinfo}'
image save memimage memory '${get:image.folder}/${get:image.prefix}${format:D6|${get:image.testcount}}'
echo.passfail '${get:indent}image <${ret:}>' 'pass'
image free memimage



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; End the transfer, see if we're done...
;
setlocal name 'dg_control/dat_pendingxfers/msg_endxfer'
dsmentry src ds dg_control dat_pendingxfers msg_endxfer '0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
increment image.testcount '${get:image.testcount}' 1 ; count the image
if '${ret:${get:TW_PENDINGXFERS.Count}}' != '0' goto MAIN.IMAGEMEMXFER.NEXT



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We're out of images, so disable...
;
setlocal name 'dg_control/dat_userinterface/msg_disableds'
dsmentry src ds dg_control dat_userinterface msg_disableds '0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Check the results before going up to the next CAP_XFERCOUNT test.
; Note that flatbeds should always return one image.
;
if '${get:feederenabled.value}' ~~ 'FALSE' goto MAIN.XFERCOUNT.CHECKTEST2
if '${get:xfercount.test}' == '2' goto MAIN.XFERCOUNT.CHECKTEST2
if '${get:xfercount.test}' == '3' goto MAIN.XFERCOUNT.CHECKTEST3
echo.passfail '${get:indent}WE SHOULD NOT BE HERE' 'fail - test=${get:xfercount.test}'
goto MAIN.ERROR.ECHOPASSFAIL
;
:MAIN.XFERCOUNT.CHECKTEST2
setlocal name 'one image transferred'
if '${get:image.testcount}' != '2' goto MAIN.ERROR.ECHOPASSFAIL ; image.testcount started at 1
echo.passfail '${get:indent}${get:name}' 'pass'
goto MAIN.XFERCOUNT.NEXT
;
:MAIN.XFERCOUNT.CHECKTEST3
setlocal name 'multiple images transferred (${get:image.testcount})' ; image.testcount started at 1
if '${get:image.testcount}' < '3' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
goto MAIN.XFERCOUNT.NEXT



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Summary and cleanup...
;
; We passed...
:MAIN.PASS
image free memimage
free pointer image.pointer
echo.passfail 'SUMMARY' 'pass'
return 'pass'
;
; Ruh-roh...
:MAIN.ERROR.ECHOPASSFAIL
image free memimage
free pointer image.pointer
echo.passfail '${get:indent}${get:name}' 'fail - ${sts:} ${ret:}'
echo.passfail 'SUMMARY' 'fail'
setglobal '${arg:2}' 'fail'
return 'fail'
