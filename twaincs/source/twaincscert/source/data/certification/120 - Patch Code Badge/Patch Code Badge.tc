;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Barcode Badge
;   These tests establish the minimum requirements for a TWAIN driver to claim it supports patch
;   codes.  It focuses on the ability to turn patch code detection on and off, identifying which
;   patch codes are supported, and making sure patch code metadata is reported.
;
; Arguments
;   (none)
;
; Globals
;  g_xfermech - transfer mechanism currently in use
;  g_capsupportedcaps - list of supported capabilities
;
; Locals
;   name - name of a test
;   certifyresult - status we're going to return
;
; Returns
;   pass/fail
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize...
;
setlocal certifyresult 'pass' ; assume we'll pass, this is our return value



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Reset the driver's capabilities, this is mandatory...
;
setlocal name 'MSG_RESETALL'
dsmentry src ds dg_control dat_capability msg_resetall '0,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.MSG_RESETALL.FAIL
echo.passfail '${get:name}' 'pass'
goto MAIN.MSG_RESETALL.DONE
;
:MAIN.MSG_RESETALL.FAIL
echo.passfail '${get:name}' 'skip - ${sts:} ${ret:}'
setlocal certifyresult 'fail'
goto MAIN.DONE
:MAIN.MSG_RESETALL.DONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ICAP_PATCHCODEDETECTIONENABLED must be supported, and must offer both TRUE
; and FALSE, and must currently be FALSE (as a result of MSG_RESETALL, otherwise
; skip it all...
;
setlocal name 'ICAP_PATCHCODEDETECTIONENABLED is supported'
dsmentry src ds dg_control dat_capability msg_get 'ICAP_PATCHCODEDETECTIONENABLED,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ICAP_PATCHCODEDETECTIONENABLEDSUPPORTED.SKIP
if ',${ret:},' !~contains ',TRUE,' goto MAIN.ICAP_PATCHCODEDETECTIONENABLEDSUPPORTED.SKIP
if ',${ret:},' !~contains ',FALSE,' goto MAIN.ICAP_PATCHCODEDETECTIONENABLEDSUPPORTED.SKIP
echo.passfail '${get:name}' 'pass'
goto MAIN.ICAP_PATCHCODEDETECTIONENABLEDSUPPORTED.DONE
;
:MAIN.ICAP_PATCHCODEDETECTIONENABLEDSUPPORTED.SKIP
echo.passfail '${get:name}' 'skip - ${sts:} ${ret:}'
setlocal certifyresult 'skip'
goto MAIN.DONE
:MAIN.ICAP_PATCHCODEDETECTIONENABLEDSUPPORTED.DONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CAP_SUPPORTEDCAPS: check that all required capabilities are reported
; We're not requiring the presence of ICAP_PATCHCODEMAXRETRIES or
; ICAP_PATCHCODETIMEOUT.  If present it's assumed the driver will default
; these to meaningful values that support the best chance of detecting
; a patch code.
;
setlocal name 'CAP_SUPPORTEDCAPS MSG_GET'
dsmentry src ds dg_control dat_capability msg_get 'CAP_SUPPORTEDCAPS,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.CAP_SUPPORTEDCAPS.FAIL
setglobal g_capsupportedcaps '${ret:}'
echo.passfail '${get:name}' 'pass'
;
setlocal name 'CAP_SUPPORTEDCAPS ICAP_PATCHCODEDETECTIONENABLED found'
if ',${get:g_capsupportedcaps},' !~contains ',ICAP_PATCHCODEDETECTIONENABLED,' goto MAIN.CAP_SUPPORTEDCAPS.FAIL
echo.passfail '${get:name}' 'pass'
;
setlocal name 'CAP_SUPPORTEDCAPS ICAP_PATCHCODEMAXSEARCHPRIORITIES found'
if ',${get:g_capsupportedcaps},' !~contains ',ICAP_PATCHCODEMAXSEARCHPRIORITIES,' goto MAIN.CAP_SUPPORTEDCAPS.FAIL
echo.passfail '${get:name}' 'pass'
;
setlocal name 'CAP_SUPPORTEDCAPS ICAP_PATCHCODESEARCHMODE found'
if ',${get:g_capsupportedcaps},' !~contains ',ICAP_PATCHCODESEARCHMODE,' goto MAIN.CAP_SUPPORTEDCAPS.FAIL
echo.passfail '${get:name}' 'pass'
;
setlocal name 'CAP_SUPPORTEDCAPS ICAP_PATCHCODESEARCHPRIORITIES found'
if ',${get:g_capsupportedcaps},' !~contains ',ICAP_PATCHCODESEARCHPRIORITIES,' goto MAIN.CAP_SUPPORTEDCAPS.FAIL
echo.passfail '${get:name}' 'pass'
;
setlocal name 'CAP_SUPPORTEDCAPS ICAP_SUPPORTEDPATCHCODETYPES found'
if ',${get:g_capsupportedcaps},' !~contains ',ICAP_SUPPORTEDPATCHCODETYPES,' goto MAIN.CAP_SUPPORTEDCAPS.FAIL
echo.passfail '${get:name}' 'pass'
;
goto MAIN.CAP_SUPPORTEDCAPS.DONE
:MAIN.CAP_SUPPORTEDCAPS.FAIL
echo.passfail '${get:name}' 'fail - ${sts:} ${get:g_capsupportedcaps}'
setlocal certifyresult 'fail'
goto MAIN.DONE
:MAIN.CAP_SUPPORTEDCAPS.DONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ICAP_SUPPORTEDEXTIMAGEINFO: check that all metadata is reported
;
setlocal name 'ICAP_SUPPORTEDEXTIMAGEINFO MSG_GET'
dsmentry src ds dg_control dat_capability msg_get 'ICAP_SUPPORTEDEXTIMAGEINFO,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ICAP_SUPPORTEDEXTIMAGEINFO.FAIL
echo.passfail '${get:name}' 'pass'
;
setlocal name 'ICAP_SUPPORTEDEXTIMAGEINFO TWEI_PATCHCODE found'
if ',${ret:},' !~contains ',TWEI_PATCHCODE,' goto MAIN.ICAP_SUPPORTEDEXTIMAGEINFO.FAIL
echo.passfail '${get:name}' 'pass'
;
goto MAIN.ICAP_SUPPORTEDEXTIMAGEINFO.DONE
:MAIN.ICAP_SUPPORTEDEXTIMAGEINFO.FAIL
echo.passfail '${get:name}' 'fail - ${sts:} ${ret:}'
setlocal certifyresult 'fail'
:MAIN.ICAP_SUPPORTEDEXTIMAGEINFO.DONE




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ICAP_PATCHCODEDETECTIONENABLED must currently be FALSE
;
setlocal name 'ICAP_PATCHCODEDETECTIONENABLED resets to FALSE'
dsmentry src ds dg_control dat_capability msg_getcurrent 'ICAP_PATCHCODEDETECTIONENABLED,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ICAP_PATCHCODEDETECTIONENABLEDFALSE.FAIL
if ',${ret:},' !~contains ',FALSE,' goto MAIN.ICAP_PATCHCODEDETECTIONENABLEDFALSE.FAIL
echo.passfail '${get:name}' 'pass'
goto MAIN.ICAP_PATCHCODEDETECTIONENABLEDFALSE.DONE
;
:MAIN.ICAP_PATCHCODEDETECTIONENABLEDFALSE.FAIL
echo.passfail '${get:name}' 'skip - ${sts:} ${ret:}'
setlocal certifyresult 'fail'
goto MAIN.DONE
:MAIN.ICAP_PATCHCODEDETECTIONENABLEDFALSE.DONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ICAP_PATCHCODEDETECTIONENABLED set to TRUE
;
setlocal name 'ICAP_PATCHCODEDETECTIONENABLED set to TRUE'
dsmentry src ds dg_control dat_capability msg_set 'ICAP_PATCHCODEDETECTIONENABLED,TWON_ONEVALUE,TWTY_BOOL,TRUE'
if '${sts:}' != 'SUCCESS' goto MAIN.ICAP_PATCHCODEDETECTIONENABLEDTRUE.FAIL
dsmentry src ds dg_control dat_capability msg_getcurrent 'ICAP_PATCHCODEDETECTIONENABLED,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ICAP_PATCHCODEDETECTIONENABLEDTRUE.FAIL
if ',${ret:},' !~contains ',TRUE,' goto MAIN.ICAP_PATCHCODEDETECTIONENABLEDTRUE.FAIL
echo.passfail '${get:name}' 'pass'
goto MAIN.ICAP_PATCHCODEDETECTIONENABLEDTRUE.DONE
;
:MAIN.ICAP_PATCHCODEDETECTIONENABLEDTRUE.FAIL
echo.passfail '${get:name}' 'skip - ${sts:} ${ret:}'
setlocal certifyresult 'fail'
goto MAIN.DONE
:MAIN.ICAP_PATCHCODEDETECTIONENABLEDTRUE.DONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get ICAP_XFERMECH...
;
setlocal name 'ICAP_XFERMECH MSG_GET'
dsmentry src ds dg_control dat_capability msg_get 'ICAP_XFERMECH,0,0,0'
if '${sts:}' == 'SUCCESS' goto MAIN.ICAP_XFERMECH.DONE
echo.passfail '${get:name}' 'fail - ${sts:} ${ret:}'
setlocal certifyresult 'fail'
goto MAIN.DONE
;
:MAIN.ICAP_XFERMECH.DONE
setglobal g_xfermech '${ret:}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; All done...
;
:MAIN.DONE
return '${get:certifyresult}'
