;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DAT_IMAGENATIVEXFER
;   This test scans two sheets of paper for the default pixeltype.  An ADF
;   is required to pass this test, but that was already been checked before
;   we got to this function.  The two sheets are as follows but don't have
;   to be in any special order:
;
;       - one without any patch codes, which must report TWRC_DATANOTAVAILABLE
;
;	    - one with a single patch code, which must report TWRC_SUCCESS for
;         TWEI_PATCHCODE
;
;   Here's the basic flow:
;       SetCapabilities
;       start scanning
;       while images
;           transfer image
;           DAT_EXTIMAGEINFO
;           end image
;       end
;       end scanning
;       verify the results
;
;   The test passes if:
;       - g_patchcodecount.none >= 1
;         and (g_patchcodecount.one >= 1)
;
; Arguments
;   arg:1 - ignore
;   arg:2 - test name for the image folder
;
; Globals
;   g_patchcodecount.none - increment if no patchcodes are found
;   g_patchcodecount.one - increment if one patchcode is found
;
; Locals
;   name - current test being done
;   indent - indent the passfail text
;   image.handle - native handle
;   image.count - count of images from 1
;   image.folder - folder to put the images in
;
; Returns
;   pass/fail
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize...
;
echo.titletest 'DAT_IMAGENATIVEXFER'
;
setlocal indent ''
setlocal image.handle '0'
setlocal image.count '1'
setlocal image.folder '${folder:certimages}/${arg:2}/DAT_IMAGENATIVEXFER'
;
setglobal g_patchcodecount.none '0'
setglobal g_patchcodecount.one '0'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Prompt the user...
;
echo.prompt
echo.prompt "Scanning will take place during this test.  There will be no"
echo.prompt "need to press any button on the TWAIN user interface to start"
echo.prompt "the scanner.  A progress indicator may appear during scanning."
echo.prompt
echo.prompt "Place at least 2 sheets in the scanner's feeder in no particular
echo.prompt "order: at least one sheet has no patch codes, and one has a"
echo.prompt "single patch code that the scanner is known to recognize."
echo.prompt
pause '(press the ENTER key when ready to continue)'
echo.prompt



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Clean the image folder for this test...
;
image cleanfolderandmeta '${get:image.folder}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SetCapabilities
; This resets the driver and sets all the capabilities we need for the test.
; If its return code is not 'pass', end with an error
;
run SetCapabilities 'TWSX_NATIVE' '${get:indent}'
if '${ret:}' != 'pass' goto MAIN.ERROR.FAIL



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Check for paper in the feeder, prompt the user if we don't find any...
;
:MAIN.FEEDERLOADED
dsmentry src ds dg_control dat_capability msg_getcurrent 'CAP_FEEDERLOADED,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.FEEDERLOADED.DONE
if '${ret:${get:TW_ONEVALUE.Item}}' ~~ 'TRUE' goto MAIN.FEEDERLOADED.DONE
echo.prompt
echo.prompt "Place paper in the scanner's feeder."
pause '(press the ENTER key when ready to continue)'
:MAIN.FEEDERLOADED.DONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start scanning...
;
setlocal indent '    '
setlocal name 'dg_control/dat_userinterface/msg_enableds'
wait reset
dsmentry src null dg_control dat_userinterface msg_enableds '0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Wait for MSG_XFERREADY, if we don't see it then scoot...
;
setlocal name 'wait ${get:sys_waittimeout} seconds for MSG_XFERREADY'
wait '${get:sys_waittimeout}000'
if '${ret:}' !~contains 'msg_xferready' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Do a native transfer...
;
:MAIN.IMAGENATIVEXFER.NEXT
setlocal indent '    '
setlocal name 'dg_control/dat_imagenativexfer/msg_get'
dsmentry src ds dg_image dat_imagenativexfer msg_get '0'
setlocal image.handle '${ret:}'
if '${sts:}' != 'XFERDONE' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
image save image.handle native '${get:image.folder}/adf${format:D6|${get:image.count}}'
echo.passfail '${get:indent}image <${ret:}>' 'pass'
free handle image.handle



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DAT_EXTIMAGEINFO
; Check the patch code metadata...
;
run DAT_EXTIMAGEINFO '${get:indent}' '${get:image.folder}/adf${format:D6|${get:image.count}}'
if '${ret:}' != 'pass' goto MAIN.ERROR.FAIL



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; End the transfer, see if we're done.  If not, go back
; to MAIN.IMAGENATIVEXFER.NEXT for another image...
;
:MAIN.PENDINGXFERS
setlocal name 'dg_control/dat_pendingxfers/msg_endxfer'
dsmentry src ds dg_control dat_pendingxfers msg_endxfer '0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
increment image.count '${get:image.count}' 1 ; count the image
if '${ret:${get:TW_PENDINGXFERS.Count}}' != '0' goto MAIN.IMAGENATIVEXFER.NEXT



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We're out of images, so disable...
;
setlocal name 'dg_control/dat_userinterface/msg_disableds'
dsmentry src ds dg_control dat_userinterface msg_disableds '0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Check to see if we passed.  We need one or more sheets of paper with no patch codes,
; and one or more sheets with one patch code.
;
setlocal name 'Final Check: detected ${get:g_patchcodecount.none} image(s) with no patch codes
if '${get:g_patchcodecount.none}' < '1' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
setlocal name 'Final Check: detected ${get:g_patchcodecount.one} image(s) with a patch code'
if '${get:g_patchcodecount.one}' < '1' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Summary and cleanup...
;
; We passed...
:MAIN.PASS
free handle image.handle
echo.passfail 'SUMMARY' 'pass'
return 'pass'
;
; Ruh-roh...
:MAIN.ERROR.ECHOPASSFAIL
free handle image.handle
echo.passfail '${get:indent}${get:name}' 'fail - ${sts:} ${ret:}'
echo.passfail 'SUMMARY' 'fail'
rollback state4
return 'fail'
;
; Ruh-roh...
:MAIN.ERROR.FAIL
free handle image.handle
echo.passfail 'SUMMARY' 'fail'
rollback state4
return 'fail'
