;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DAT_IMAGEMEMXFER
;   This test scans one sheet of paper for the default pixeltype.  An ADF is required to pass this test,
;   but that was already been confirmed before we got to this function.  We're going to set the driver,
;   scan a sheet of paper, and check the TWEI_* values.
;
;   Here's the basic flow:
;       SetCapabilities
;       start scanning
;       while images
;           transfer image
;           DAT_EXTIMAGEINFO
;           end image
;       end
;       end scanning
;       verify the results
;
;   The test passes if:
;       - all of the CAP_IAFIELD*_* capabilities can be set
;       - scanning is successful
;       - the TWEI_IALEVEL and TWEI_IAFIELD*_VALUE field are correctly set
;       - if printing is supported, CAP_PRINTERMODE can be set and
;         CAP_PRINTERTEXT contains the correct value
;
; Arguments
;   arg:1 - test name for the image folder
;   arg:2 - TWEI_IAFIELD*_VALUE containing fixed field (can be empty if none)
;   arg:3 - fielda image address settings 'twia,printformat,value'
;   arg:4 - fieldb image address settings 'twia,printformat,value'
;   arg:5 - fieldc image address settings 'twia,printformat,value'
;   arg:6 - fieldd image address settings 'twia,printformat,value'
;   arg:7 - fielde image address settings 'twia,printformat,value'
;
; Globals
;   (none)
;
; Locals
;   name - current test being done
;   indent - indent the passfail text
;   imageinfo - metadata for the current image
;   imagememxfer - result of DAT_IMAGEMEMXFER call
;   setupmemxfer.preferred - preferred field from DAT_SETUPMEMXFER call
;   image.count - count of images from 1
;   image.folder - folder to put the images in
;   totalfields - total value image address fields
;
; Returns
;   pass/fail
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize...
;
setlocal fixedfieldname   '${arg:2}'
setlocal fielda           '${arg:3}' ; check argindex down below
setlocal fieldb           '${arg:4}'
setlocal fieldc           '${arg:5}'
setlocal fieldd           '${arg:6}'
setlocal fielde           '${arg:7}'
;
setlocal indent ''
setlocal image.pointer '0'
setlocal image.count '0'
setlocal image.folder '${folder:certimages}/${arg:1}/DAT_IMAGEMEMXFER'
;
; Figure out how many iafields have data, and get the fixed field value,
; if any.  We're use them to check the TWEI_* values...
setlocal totalfields 0      ; assume no fields
setlocal argindex 2         ; first ia field argument - 1
setlocal fixedfieldvalue '' ; assume we don't have a value
:MAIN.PARSE.NEXT
increment argindex ${get:argindex} 1
if '${arg:${get:argindex}}' == '' goto MAIN.PARSE.DONE ; ran out of arguments
if '${arg:${get:argindex}}' ~contains 'TWIA_UNUSED' goto MAIN.PARSE.NEXT ; skip unused fields
if '${getindex:TWEI_IAFIELDA_VALUE,TWEI_IAFIELDB_VALUE,TWEI_IAFIELDC_VALUE,TWEI_IAFIELDD_VALUE,TWEI_IAFIELDE_VALUE:${get:argindex}}' != '${get:fixedfieldname}' goto MAIN.PARSE.NOTFIXED
setlocal fixedfieldvalue '${getindex:${arg:${get:argindex}}:2}'
:MAIN.PARSE.NOTFIXED
increment totalfields ${get:totalfields} 1
goto MAIN.PARSE.NEXT
:MAIN.PARSE.DONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Clean the image folder for this test...
;
image cleanfolderandmeta '${get:image.folder}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SetCapabilities
; This resets the driver and sets all the capabilities we need for the test.
; If its return code is not 'pass', end with an error
;
run SetCapabilities 'TWSX_MEMORY' '${get:indent}' '${get:totalfields}' '${get:fielda}' '${get:fieldb}' '${get:fieldc}' '${get:fieldd}' '${get:fielde}'
setlocal returnvalue ${ret:}
if '${ret:}' != 'skip' goto MAIN.SETCAPABILITES.CHECKPASS
goto MAIN.SETCAPABILITES.DONE
;
:MAIN.SETCAPABILITES.CHECKPASS
if '${get:returnvalue}' != 'pass' goto MAIN.ERROR.FAIL
:MAIN.SETCAPABILITES.DONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Check for paper in the feeder, prompt the user if we don't find any...
;
dsmentry src ds dg_control dat_capability msg_getcurrent 'CAP_FEEDERLOADED,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.FEEDERLOADED.DONE
if '${ret:${get:TW_ONEVALUE.Item}}' ~~ 'TRUE' goto MAIN.FEEDERLOADED.DONE
echo.prompt
echo.prompt "Place paper in the scanner's feeder."
pause '(press the ENTER key when ready to continue)'
:MAIN.FEEDERLOADED.DONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get the preferred size for memory transfers, and allocate
; a pointer for the memory transfers...
;
setlocal indent '    '
setlocal name 'dg_control/dat_setupmemxfer/msg_get'
dsmentry src ds dg_control dat_setupmemxfer msg_get '0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
setlocal name 'TW_SETUPMEMXFER.Preferred > 0'
setlocal setupmemxfer.preferred '${ret:${get:TW_SETUPMEMXFER.Preferred}}'
if '${get:setupmemxfer.preferred}' <= '0' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
setlocal name 'allocate pointer for ${get:setupmemxfer.preferred} bytes'
free pointer image.pointer ; for the last loop
allocate pointer image.pointer '${get:setupmemxfer.preferred}'
if '${get:image.pointer}' == '0' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start scanning...
;
setlocal name 'dg_control/dat_userinterface/msg_enableds'
wait reset
dsmentry src null dg_control dat_userinterface msg_enableds '0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Wait for MSG_XFERREADY, if we don't see it then scoot...
;
setlocal name 'wait ${get:sys_waittimeout} seconds for MSG_XFERREADY'
wait '${get:sys_waittimeout}000'
if '${ret:}' !~contains 'msg_xferready' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Do a memory transfer...
; This little song and dance with the states is so that we can
; start the transfer in state 6 with each new image, but switch
; to state 7 if we need multiple calls to capture the current
; image...
;
; The saved images will be in TIFF format, which includes TIFF
; JPEG (the better form, where a simple TIFF header is added).
;
increment image.count '${get:image.count}' 1
image free memimage
;
:MAIN.IMAGEMEMXFER.NEXT
setlocal name 'dg_image/dat_imagememxfer/msg_get'
dsmentry src ds dg_image dat_imagememxfer msg_get '0,0,0,0,0,0,0,9,${get:setupmemxfer.preferred},${get:image.pointer}'
setlocal imagememxfer '${ret:}'
if '${sts:}' == 'XFERDONE' goto MAIN.IMAGEMEMXFER.XFERDONE
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
;
echo.passfail '${get:indent}${get:name} SUCCESS' 'pass'
image append memimage '${get:imagememxfer}'
goto MAIN.IMAGEMEMXFER.NEXT
;
:MAIN.IMAGEMEMXFER.XFERDONE
echo.passfail '${get:indent}${get:name} XFERDONE' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We need image info to make sense of this data...
;
setlocal name 'dg_image/dat_imageinfo/msg_get'
dsmentry src ds dg_image dat_imageinfo msg_get '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0'
setlocal imageinfo '${ret:}'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Append the last strip transferred, and save the image...
;
image append memimage '${get:imagememxfer}'
image addheader memimage '${get:imageinfo}'
image save memimage memory '${get:image.folder}/adf${format:D6|${get:image.count}}'
echo.passfail '${get:indent}image <${ret:}>' 'pass'
image free memimage



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DAT_EXTIMAGEINFO
; Check the printer metadata...
;
run DAT_EXTIMAGEINFO '${get:indent}' '${get:image.folder}/adf${format:D6|${get:image.count}}' '${get:fixedfieldname}' '${get:fixedfieldvalue}' '${get:totalfields}'
if '${ret:}' != 'pass' goto MAIN.ERROR.FAIL



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; End the transfer, see if we're done.  If not, go back
; to MAIN.IMAGENATIVEXFER.NEXT for another image...
;
setlocal name 'dg_control/dat_pendingxfers/msg_endxfer'
dsmentry src ds dg_control dat_pendingxfers msg_endxfer '0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
increment image.count '${get:image.count}' 1
if '${ret:${get:TW_PENDINGXFERS.Count}}' != '0' goto MAIN.IMAGEMEMXFER.NEXT



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We're out of images, so disable...
;
setlocal name 'dg_control/dat_userinterface/msg_disableds'
dsmentry src ds dg_control dat_userinterface msg_disableds '0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Summary and cleanup...
;
; We passed...
:MAIN.PASS
image free memimage
echo.passfail 'SUMMARY' 'pass'
return 'pass'
;
; Skip is allowed for CAP_IAFIELDE_*...
:MAIN.SKIP
image free memimage
echo.passfail 'SUMMARY' 'skip'
return 'skip'
;
; Ruh-roh...
:MAIN.ERROR.ECHOPASSFAIL
image free memimage
echo.passfail '${get:indent}${get:name}' 'fail - ${sts:} ${ret:}'
echo.passfail 'SUMMARY' 'fail'
rollback state4
return 'fail'
;
; Ruh-roh...
:MAIN.ERROR.FAIL
image free memimage
echo.passfail 'SUMMARY' 'fail'
rollback state4
return 'fail'
