;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DAT_IMAGEMEMFILEXFER
;   This test scans one sheet of paper for the default pixeltype.  An ADF
;   is required to pass this test, but that was already been tested before
;   we got to this function.
;
;   Here's the basic flow:
;       SetCapabilities
;       start scanning
;       while images
;           transfer image
;           DAT_EXTIMAGEINFO
;           end image
;       end
;       end scanning
;       verify the results
;
;   The test passes if:
;       - all of the capabilities can be set
;       - TWEI_PRINTER matches CAP_PRINTER
;       - TWEI_PRINTERSTRING starts with 'TWAIN' and ends with 'TEST'
;
; Arguments
;   arg:1 - TW_IDENTITY.ProductName of scanner to test
;   arg:2 - test name for the image folder
;
; Globals
;   g_capprinter - value of CAP_PRINTER, used to check TWEI_PRINTER
;
; Locals
;   name - current test being done
;   indent - indent the passfail text
;   imagememxfer - result of DAT_IMAGEMEMXFER call
;   setupmemxfer.preferred - preferred field from DAT_SETUPMEMXFER call
;   image.count - count of images from 1
;   image.folder - folder to put the images in
;
; Returns
;   pass/fail
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; If not supported, quietly leave...
;
if '${get:g_xfermech}' ~contains 'TWSX_MEMFILE' goto MAIN.CONTINUE
return 'pass'
:MAIN.CONTINUE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize...
;
echo.titletest 'DAT_IMAGEMEMFILEXFER'
;
setlocal indent ''
setlocal image.pointer '0'
setlocal image.count '0'
setlocal image.folder '${folder:certimages}/${arg:2}/DAT_IMAGEMEMFILEXFER'
;
setglobal g_capprinter ''



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Prompt the user...
;
echo.prompt
echo.prompt "Scanning will take place during this test.  There will be no"
echo.prompt "need to press any button on the TWAIN user interface to start"
echo.prompt "the scanner.  A progress indicator may appear during scanning."
echo.prompt
echo.prompt "Place 1 sheet in the scanner's feeder.  The scanner will print"
echo.prompt "text on this sheet."
echo.prompt
pause '(press the ENTER key when ready to continue)'
echo.prompt



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Clean the image folder for this test...
;
image cleanfolderandmeta '${get:image.folder}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SetCapabilities
; This resets the driver and sets all the capabilities we need for the test.
; If its return code is not 'pass', end with an error
;
run SetCapabilities 'TWSX_MEMFILE' '${get:indent}' g_capprinter
if '${ret:}' != 'pass' goto MAIN.ERROR.FAIL



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Check for paper in the feeder, prompt the user if we don't find any...
;
dsmentry src ds dg_control dat_capability msg_getcurrent 'CAP_FEEDERLOADED,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.FEEDERLOADED.DONE
if '${ret:${get:TW_ONEVALUE.Item}}' ~~ 'TRUE' goto MAIN.FEEDERLOADED.DONE
echo.prompt
echo.prompt "Place paper in the scanner's feeder."
pause '(press the ENTER key when ready to continue)'
:MAIN.FEEDERLOADED.DONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get the preferred size for memory transfers, and allocate
; a pointer for the memory transfers...
;
setlocal indent '    '
setlocal name 'dg_control/dat_setupmemxfer/msg_get'
dsmentry src ds dg_control dat_setupmemxfer msg_get '0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
setlocal name 'TW_SETUPMEMXFER.Preferred > 0'
setlocal setupmemxfer.preferred '${ret:${get:TW_SETUPMEMXFER.Preferred}}'
if '${get:setupmemxfer.preferred}' <= '0' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
setlocal name 'allocate pointer for ${get:setupmemxfer.preferred} bytes'
free pointer image.pointer ; for the last loop
allocate pointer image.pointer '${get:setupmemxfer.preferred}'
if '${get:image.pointer}' == '0' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set DAT_SETUPFILEXFER to TWFF_TIFF
;
setlocal name 'dg_control/dat_setupfilexfer/msg_set TWFF_TIFF'
dsmentry src null dg_control dat_setupfilexfer msg_set 'file,TWFF_TIFF,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start scanning...
;
setlocal name 'dg_control/dat_userinterface/msg_enableds'
wait reset
dsmentry src null dg_control dat_userinterface msg_enableds '0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Wait for MSG_XFERREADY, if we don't see it then scoot...
;
setlocal name 'wait ${get:sys_waittimeout} seconds for MSG_XFERREADY'
wait '${get:sys_waittimeout}000'
if '${ret:}' !~contains 'msg_xferready' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Do a memory file transfer...
; This little song and dance with the states is so that we can
; start the transfer in state 6 with each new image, but switch
; to state 7 if we need multiple calls to capture the current
; image...
;
; The saved images will be in TIFF format, which includes TIFF
; JPEG (the better form, where a simple TIFF header is added).
;
increment image.count '${get:image.count}' 1
image free memfileimage
;
:MAIN.IMAGEMEMFILEXFER.NEXT
setlocal name 'dg_image/dat_imagememxfer/msg_get'
dsmentry src ds dg_image dat_imagememfilexfer msg_get '0,0,0,0,0,0,0,9,${get:setupmemxfer.preferred},${get:image.pointer}'
setlocal imagememxfer '${ret:}'
if '${sts:}' == 'XFERDONE' goto MAIN.IMAGEMEMFILEXFER.XFERDONE
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
;
echo.passfail '${get:indent}${get:name} SUCCESS' 'pass'
image append memfileimage '${get:imagememxfer}'
goto MAIN.IMAGEMEMFILEXFER.NEXT
;
:MAIN.IMAGEMEMFILEXFER.XFERDONE
echo.passfail '${get:indent}${get:name} XFERDONE' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Append the last strip transferred, and save the image...
;
image append memfileimage '${get:imagememxfer}'
image save memfileimage memfile '${get:image.folder}/adf${format:D6|${get:image.count}}'
echo.passfail '${get:indent}image <${ret:}>' 'pass'
image free memfileimage



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DAT_EXTIMAGEINFO
; Check the printer metadata...
;
run DAT_EXTIMAGEINFO '${get:indent}' '${get:image.folder}/adf${format:D6|${get:image.count}}' ${get:g_capprinter}
if '${ret:}' != 'pass' goto MAIN.ERROR.FAIL



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; End the transfer, see if we're done...
;
setlocal name 'dg_control/dat_pendingxfers/msg_endxfer'
dsmentry src ds dg_control dat_pendingxfers msg_endxfer '0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
increment image.count '${get:image.count}' 1
if '${ret:${get:TW_PENDINGXFERS.Count}}' != '0' goto MAIN.IMAGEMEMFILEXFER.NEXT



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We're out of images, so disable...
;
setlocal name 'dg_control/dat_userinterface/msg_disableds'
dsmentry src ds dg_control dat_userinterface msg_disableds '0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Summary and cleanup...
;
; We passed...
:MAIN.PASS
image free memfileimage
free pointer image.pointer
echo.passfail 'SUMMARY' 'pass'
return 'pass'
;
; Ruh-roh...
:MAIN.ERROR.ECHOPASSFAIL
image free memfileimage
free pointer image.pointer
echo.passfail '${get:indent}${get:name}' 'fail - ${sts:} ${ret:}'
echo.passfail 'SUMMARY' 'fail'
rollback state4
return 'fail'
;
; Ruh-roh...
:MAIN.ERROR.FAIL
image free memfileimage
free pointer image.pointer
echo.passfail 'SUMMARY' 'fail'
rollback state4
return 'fail'
