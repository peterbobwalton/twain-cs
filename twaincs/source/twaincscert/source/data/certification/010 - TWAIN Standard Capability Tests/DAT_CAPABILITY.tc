;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DAT_CAPABILITY
;   Exercise DAT_CAPABILITY for the standard TWAIN capabilities
;
; Arguments
;   arg:1 - TW_IDENTITY.ProductName of scanner to test
;
; Globals
;   g_datcapabilityresult - pass/fail for the entire test
;   g_querysupport - numeric value of query support for a capability
;   g_pixeltype.value - for restoring pixel type
;
; Locals
;   name - current test being done
;   indent - amount to indent echo.passfail
;
;   pixeltype.itemlist - list of pixeltypes to check
;   pixeltype.index - index of current pixeltype being checked
;
;   supportedcaps - data from MSG_GET for CAP_SUPPORTEDCAPS
;   supportedcaps.index - index of capability from supportedcaps
;   supportedcaps.value - current cap value for supportedcaps.index
;
; Returns
;   pass or fail
;
; History
;   v1.0 21-Feb-2020 - first version
;   v1.1 29-Apr-2020 - fixed MSG_SET test to use TW_ONEVALUE, per the spec
;   v1.2 03-Jun-2020 - skip MSG_SET if any previous test failed
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize...
;
echo.titletest 'DAT_CAPABILITY'
setlocal indent ''
setlocal pixeltype.itemlist 'TWPT_BW,TWPT_GRAY,TWPT_RGB'
setlocal pixeltype.index '-1'
setglobal g_datcapabilityresult 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MSG_RESETALL
; If return code is not TWRC_SUCCESS, end with an error
;
setlocal name 'MSG_RESETALL'
dsmentry src ds dg_control dat_capability msg_resetall '0,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Repeat this section for each enumerated value found inside of ICAP_PIXELTYPE, 
; (testing is done for each value of ICAP_PIXELTYPE, to provide the best chance
; of exercising every available capability).  Remember the pixeltype setting,
; because we have to restore it as part of the MSG_RESET and MSG_SET tests.
;
:MAIN.NEXTTWPT
setlocal indent ''
increment pixeltype.index '${get:pixeltype.index}'
setglobal g_pixeltype.value '${getindex:pixeltype.itemlist:${get:pixeltype.index}}'
if '${get:g_pixeltype.value}' != '' goto MAIN.TWPTSET
goto MAIN.PASS
:MAIN.TWPTSET
dsmentry src ds dg_control dat_capability msg_set 'ICAP_PIXELTYPE,TWON_ONEVALUE,TWTY_UINT16,${get:g_pixeltype.value}'
if '${sts:}' == 'SUCCESS' goto MAIN.TWPTCONTINUE
echo.passfail '${get:indent}${get:g_pixeltype.value}' 'skip'
goto MAIN.NEXTTWPT
:MAIN.TWPTCONTINUE
echo.passfail '${get:indent}${get:g_pixeltype.value}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Repeat this section for Standard TWAIN array values found inside of
; CAP_SUPPORTEDCAPS (each Standard TWAIN capability ID is referred to as #CAP#
; for the rest of this section)
;
setlocal indent '  '
setlocal name 'CAP_SUPPORTEDCAPS MSG_GET'
dsmentry src ds dg_control dat_capability msg_get 'CAP_SUPPORTEDCAPS,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal supportedcaps '${ret:}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Turn on capabilities that enable the use of other capabilities
; SPECNOTE: this isn't described in the tests, but it seems like a good idea
;
call ENABLECAPABILITIES '${get:supportedcaps}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Grab a standard TWAIN capability from CAP_SUPPORTEDCAPS, we know it's
; supported if we have a name for it (it's not a number).
;
setlocal supportedcaps.index '${get:TW_ARRAY.ItemList}'
increment supportedcaps.index '${get:supportedcaps.index}' -1
:MAIN.NEXTCAP
;
increment supportedcaps.index '${get:supportedcaps.index}'
setlocal supportedcaps.value '${getindex:supportedcaps:${get:supportedcaps.index}}'
if '${get:supportedcaps.value}' == '' goto MAIN.NEXTTWPT ; we've run out of supportedcaps values
if '${get:supportedcaps.value}' ~contains '0x' goto MAIN.NEXTCAP ; not a standard cap


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Perform these tests on each capability...
; SPECNOTE: because we're referencing the querysupport value we don't have to accept
; TWCC_CAPSEQERROR as a valid value, so it'll be an error just like everything else...
;
call MSGQUERYSUPPORT '${get:supportedcaps.value}' g_querysupport          g_datcapabilityresult
call MSGGET          '${get:supportedcaps.value}' '${get:g_querysupport}' g_datcapabilityresult
call MSGGETCURRENT   '${get:supportedcaps.value}' '${get:g_querysupport}' g_datcapabilityresult
call MSGGETDEFAULT   '${get:supportedcaps.value}' '${get:g_querysupport}' g_datcapabilityresult
call MSGRESET        '${get:supportedcaps.value}' '${get:g_querysupport}' g_datcapabilityresult
call MSGSET          '${get:supportedcaps.value}' '${get:g_querysupport}' g_datcapabilityresult
goto MAIN.NEXTCAP



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Summary and cleanup...
;
; Did we pass? (do an extra check)
:MAIN.PASS
if '${get:g_datcapabilityresult}' != 'pass' goto MAIN.ERROR
echo.passfail 'SUMMARY' 'pass'
return 'pass'
;
; Ruh-roh...
:MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'fail - ${sts:} ${ret:}'
:MAIN.ERROR
echo.passfail 'SUMMARY' 'fail'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: MSGQUERYSUPPORT
;
; Arguments
;   arg:1 - capability to check
;   arg:2 - value returned
;   arg:3 - only updated on fail
;
; Globals
;   (none)
;
; Locals
;   name - name of current test
;   indent - amount to indent echo.passfail
;   capability - MSG_QUERYSUPPORT on arg:1
;
; Returns
;   (none)
;
:MSGQUERYSUPPORT
;
; Header...
setlocal indent '    '
echo ' '
echo '  ${arg:1}'
;
; Check if it's deprecated...
setlocal capabilitytable.flags '${get:${arg:1}.Flags}' ; ex: ICAP_PIXELTYPE.Flags
if '${get:capabilitytable.flags}' ~contains 'deprecated' goto MSGQUERYSUPPORT.DEPRECATED
;
; Send the command...
setlocal name 'Send MSG_QUERYSUPPORT'
dsmentry src ds dg_control dat_capability msg_querysupport '${arg:1},0,0,0'
if '${sts:}' != 'SUCCESS' goto MSGQUERYSUPPORT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal capability '${ret:}'
;
; If TW_CAPABILITY.Cap is not #CAP#, then end with error
setlocal name 'Verify Cap'
setlocal failinfo ' (found ${getindex:capability:${get:TW_CAPABILITY.Cap}})'
if '${getindex:capability:${get:TW_CAPABILITY.Cap}}' != '${arg:1}' goto MSGQUERYSUPPORT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; If TW_CAPABILITY.ConType is not TWON_ONEVALUE, then end with error.
setlocal name 'Verify ConType is TWON_ONEVALUE'
setlocal failinfo ' (found ${getindex:capability:${get:TW_CAPABILITY.ConType}})'
if '${getindex:capability:${get:TW_CAPABILITY.ConType}}' != 'TWON_ONEVALUE' goto MSGQUERYSUPPORT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; If TW_ONEVALUE.ItemType is not TWTY_UINT32, then end with error
; SPECNOTE: spec says TWTY_INT32, test says TWTY_UINT32...spec wins...
setlocal name 'Verify ItemType is TWTY_INT32'
setlocal failinfo ' (found ${getindex:capability:${get:TW_ONEVALUE.ItemType}}'
if '${getindex:capability:${get:TW_ONEVALUE.ItemType}}' != 'TWTY_INT32' goto MSGQUERYSUPPORT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; If TWQC_GET, TWQC_GETCURRENT or TWQC_GETDEFAULT is detected, then
; all three must be present, if any are missing end with error
setlocal name 'Verify GET, GETCURRENT, GETDEFAULT'
setlocal failinfo ' (found ${getindex:capability:${get:TW_ONEVALUE.Item}}'
if '${getindex:capability:${get:TW_ONEVALUE.Item}}' & '0x000D' == '0' goto MSGQUERYSUPPORT.VERIFYSET
if '${getindex:capability:${get:TW_ONEVALUE.Item}}' & '0x000D' != '0x000D' goto MSGQUERYSUPPORT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; If TWQC_RESET or TWQC_SET is detected, then both must be present,
; plus TWQC_GET, TWQC_GETCURRENT and TWQC_GETDEFAULT, if not true
; then end with error
:MSGQUERYSUPPORT.VERIFYSET
setlocal name 'Verify SET, RESET with GETs'
setlocal failinfo ' (found ${getindex:capability:${get:TW_ONEVALUE.Item}}'
if '${getindex:capability:${get:TW_ONEVALUE.Item}}' & '0x0012' == '0' goto MSGQUERYSUPPORT.PASS
if '${getindex:capability:${get:TW_ONEVALUE.Item}}' & '0x001F' != '0x001F' goto MSGQUERYSUPPORT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
goto MSGQUERYSUPPORT.PASS
;
; All done...
:MSGQUERYSUPPORT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'woof${get:failinfo}'
setglobal '${arg:2}' '0'
setglobal '${arg:3}' 'fail'
return
;
:MSGQUERYSUPPORT.PASS
setglobal '${arg:2}' '${getindex:capability:${get:TW_ONEVALUE.Item}}' ; the value for this capability
return
;
:MSGQUERYSUPPORT.DEPRECATED
echo.passfail '${get:indent}Note' 'deprecated (this is not a failure)'
setglobal '${arg:2}' '0' ; the value for this capability
return



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: MSGGET
;
; Arguments
;   arg:1 - capability to check
;   arg:2 - value from MSG_QUERYSUPPORT
;   arg:3 - only updated on fail
;
; Globals
;   (none)
;
; Locals
;   name - name of current test
;   indent - amount to indent echo.passfail
;   capability - MSG_QUERYSUPPORT on arg:1
;
; Returns
;   (none)
;
:MSGGET
;
; Skip if not supported (TWQC_GET)...
if '${arg:2}' & '0x0001' == '0' goto MSGGET.SKIP
setlocal indent '    '
;
; Send the command...
setlocal name 'Send MSG_GET'
dsmentry src ds dg_control dat_capability msg_get '${arg:1},0,0,0'
if '${sts:}' != 'SUCCESS' goto MSGGET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal capability '${ret:}'
;
; If TW_CAPABILITY.Cap is not #CAP#, then end with error
setlocal name 'Verify Cap'
if '${getindex:capability:${get:TW_CAPABILITY.Cap}}' != '${arg:1}' goto MSGGET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; If the value of TW_CAPABILITY.ConType doesn’t match the Specification’s
; MSG_GET container for this capability, then end with error
setlocal name 'Verify ConType contains ${get:${arg:1}.ConType}'
if '${get:${arg:1}.ConType}' !~contains '${getindex:capability:${get:TW_CAPABILITY.ConType}}' goto MSGGET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; If container’s ItemType doesn’t match the Specification’s ItemType for
; this capability, then end with error.  Note that the index for ItemType
; is the same for all containers, so it doesn't matter which one we use
; to check this...
setlocal name 'Verify ItemType contains ${get:${arg:1}.ItemType}'
if '${get:${arg:1}.ItemType}' !~contains '${getindex:capability:${get:TW_ONEVALUE.ItemType}}' goto MSGGET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; All done...
goto MSGGET.PASS
:MSGGET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'fail'
setglobal '${arg:3}' 'fail'
return
:MSGGET.SKIP
return
:MSGGET.PASS
return



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: MSGGETCURRENT
;
; Arguments
;   arg:1 - capability to check
;   arg:2 - value from MSG_QUERYSUPPORT
;   arg:3 - only updated on fail
;
; Globals
;   (none)
;
; Locals
;   name - name of current test
;   indent - amount to indent echo.passfail
;   capability - MSG_QUERYSUPPORT on arg:1
;
; Returns
;   (none)
;
:MSGGETCURRENT
;
; Skip if not supported (TWQC_GETCURRENT)...
if '${arg:2}' & '0x0008' == '0' goto MSGGETCURRENT.SKIP
setlocal indent '    '
;
; Send the command...
setlocal name 'Send MSG_GETCURRENT'
dsmentry src ds dg_control dat_capability msg_getcurrent '${arg:1},0,0,0'
if '${sts:}' != 'SUCCESS' goto MSGGETCURRENT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal capability '${ret:}'
;
; If TW_CAPABILITY.Cap is not #CAP#, then end with error
setlocal name 'Verify Cap'
if '${getindex:capability:${get:TW_CAPABILITY.Cap}}' != '${arg:1}' goto MSGGETCURRENT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; If the TW_CAPABILITY.ConType for MSG_GET was TWON_ENUMERATION, TWON_ONEVALUE
; or TWON_RANGE, then the TW_CAPABILITY.ConType for MSG_GETCURRENT must be
; TWTY_ONEVALUE, if not then end with error
; SPECNOTE: we're testing for array, which gives us the same result...
if '${get:${arg:1}.ConType}' contains 'TWON_ARRAY' goto MSGGETCURRENT.ARRAY
setlocal name 'Verify ConType contains TWON_ONEVALUE'
if '${getindex:capability:${get:TW_CAPABILITY.ConType}}' != 'TWON_ONEVALUE' goto MSGGETCURRENT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
goto MSGGETCURRENT.ITEMTYPE
:MSGGETCURRENT.ARRAY
setlocal name 'Verify ConType contains TWON_ARRAY'
if '${getindex:capability:${get:TW_CAPABILITY.ConType}}' != 'TWON_ARRAY' goto MSGGETCURRENT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; If container’s ItemType doesn’t match the Specification’s ItemType for
; this capability, then end with error.  Note that the index for ItemType
; is the same for all containers, so it doesn't matter which one we use
; to check this...
:MSGGETCURRENT.ITEMTYPE
setlocal name 'Verify ItemType contains ${get:${arg:1}.ItemType}'
if '${get:${arg:1}.ItemType}' !~contains '${getindex:capability:${get:TW_ONEVALUE.ItemType}}' goto MSGGETCURRENT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; All done...
goto MSGGETCURRENT.PASS
:MSGGETCURRENT.ERROR.ECHOPASSFAIL
echo.passfail '  ${get:name}' 'fail'
setglobal '${arg:3}' 'fail'
return
:MSGGETCURRENT.SKIP
return
:MSGGETCURRENT.PASS
return



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: MSGGETDEFAULT
;
; Arguments
;   arg:1 - capability to check
;   arg:2 - value from MSG_QUERYSUPPORT
;   arg:3 - only updated on fail
;
; Globals
;   (none)
;
; Locals
;   name - name of current test
;   indent - amount to indent echo.passfail
;   capability - MSG_QUERYSUPPORT on arg:1
;
; Returns
;   (none)
;
:MSGGETDEFAULT
;
; Skip if not supported (TWQC_GETDEFAULT)...
if '${arg:2}' & '0x0004' == '0' goto MSGGETDEFAULT.SKIP
setlocal indent '    '
;
; Send the command...
setlocal name 'Send MSG_GETDEFAULT'
dsmentry src ds dg_control dat_capability msg_getdefault '${arg:1},0,0,0'
if '${sts:}' != 'SUCCESS' goto MSGGETDEFAULT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal capability '${ret:}'
;
; If TW_CAPABILITY.Cap is not #CAP#, then end with error
setlocal name 'Verify Cap'
if '${getindex:capability:${get:TW_CAPABILITY.Cap}}' != '${arg:1}' goto MSGGETDEFAULT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; If the TW_CAPABILITY.ConType for MSG_GET was TWON_ENUMERATION, TWON_ONEVALUE
; or TWON_RANGE, then the TW_CAPABILITY.ConType for MSG_GETDEFAULT must be
; TWTY_ONEVALUE, if not then end with error
; SPECNOTE: we're testing for array, which gives us the same result...
if '${get:${arg:1}.ConType}' contains 'TWON_ARRAY' goto MSGGETDEFAULT.ARRAY
setlocal name 'Verify ConType contains TWON_ONEVALUE'
if '${getindex:capability:${get:TW_CAPABILITY.ConType}}' != 'TWON_ONEVALUE' goto MSGGETDEFAULT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
goto MSGGETDEFAULT.ITEMTYPE
:MSGGETDEFAULT.ARRAY
setlocal name 'Verify ConType contains TWON_ARRAY'
if '${getindex:capability:${get:TW_CAPABILITY.ConType}}' != 'TWON_ARRAY' goto MSGGETDEFAULT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; If container’s ItemType doesn’t match the Specification’s ItemType for
; this capability, then end with error.  Note that the index for ItemType
; is the same for all containers, so it doesn't matter which one we use
; to check this...
:MSGGETDEFAULT.ITEMTYPE
setlocal name 'Verify ItemType contains ${get:${arg:1}.ItemType}'
if '${get:${arg:1}.ItemType}' !~contains '${getindex:capability:${get:TW_ONEVALUE.ItemType}}' goto MSGGETDEFAULT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; All done...
goto MSGGETDEFAULT.PASS
:MSGGETDEFAULT.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'fail'
setglobal '${arg:3}' 'fail'
return
:MSGGETDEFAULT.SKIP
return
:MSGGETDEFAULT.PASS
return



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: MSGRESET
;
; Arguments
;   arg:1 - capability to check
;   arg:2 - value from MSG_QUERYSUPPORT
;   arg:3 - only updated on fail
;
; Globals
;   (none)
;
; Locals
;   name - name of current test
;   indent - amount to indent echo.passfail
;   capability - MSG_QUERYSUPPORT on arg:1
;
; Returns
;   (none)
;
:MSGRESET
;
; Skip if not supported (TWQC_RESET)...
if '${arg:2}' & '0x0010' == '0' goto MSGRESET.SKIP
setlocal indent '    '
;
; Send the command...
setlocal name 'Send MSG_RESET'
dsmentry src ds dg_control dat_capability msg_reset '${arg:1},0,0,0'
if '${sts:}' != 'SUCCESS' goto MSGRESET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal capability '${ret:}'
;
; If TW_CAPABILITY.Cap is not #CAP#, then end with error
setlocal name 'Verify Cap'
if '${getindex:capability:${get:TW_CAPABILITY.Cap}}' != '${arg:1}' goto MSGRESET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; If the TW_CAPABILITY.ConType for MSG_GET was TWON_ENUMERATION, TWON_ONEVALUE
; or TWON_RANGE, then the TW_CAPABILITY.ConType for MSG_GETDEFAULT must be
; TWTY_ONEVALUE, if not then end with error
; SPECNOTE: the test implies that the MSG_GET container should returned, this is wrong...
; SPECNOTE: we're testing for array, which gives us the same result...
if '${get:${arg:1}.ConType}' contains 'TWON_ARRAY' goto MSGRESET.ARRAY
setlocal name 'Verify ConType contains TWON_ONEVALUE'
if '${getindex:capability:${get:TW_CAPABILITY.ConType}}' != 'TWON_ONEVALUE' goto MSGRESET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
goto MSGRESET.ITEMTYPE
:MSGRESET.ARRAY
setlocal name 'Verify ConType contains TWON_ARRAY'
if '${getindex:capability:${get:TW_CAPABILITY.ConType}}' != 'TWON_ARRAY' goto MSGRESET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; If container’s ItemType doesn’t match the Specification’s ItemType for
; this capability, then end with error.  Note that the index for ItemType
; is the same for all containers, so it doesn't matter which one we use
; to check this...
:MSGRESET.ITEMTYPE
setlocal name 'Verify ItemType contains ${get:${arg:1}.ItemType}'
if '${get:${arg:1}.ItemType}' !~contains '${getindex:capability:${get:TW_ONEVALUE.ItemType}}' goto MSGRESET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; All done...
goto MSGRESET.PASS
:MSGRESET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'fail'
call RESTORECAPABILITY '${arg:1}'
setglobal '${arg:3}' 'fail'
return
:MSGRESET.SKIP
return
:MSGRESET.PASS
call RESTORECAPABILITY '${arg:1}'
return



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: MSGSET
;   First we're going to do a MSG_GET followed by a MSG_SET with either a TW_ARRAY or a
;   TW_ONEVALUE, as indicated by the spec.  Note that prior to 2.4 MSG_SET allowed one
;   to send any container.  For the second round we do a MSG_GETCURRENT and set with that
;   value, which also must be a TW_ARRAY or TW_ONEVALUE.
;
; Arguments
;   arg:1 - capability to check
;   arg:2 - value from MSG_QUERYSUPPORT
;   arg:3 - only updated on fail
;
; Globals
;   (none)
;
; Locals
;   name - name of current test
;   indent - amount to indent echo.passfail
;   capability - MSG_QUERYSUPPORT on arg:1
;
; Returns
;   (none)
;
:MSGSET
;
; Skip if not supported (TWQC_SET)...
if '${arg:2}' & '0x0002' == '0' goto MSGSET.SKIP
if '${arg:3}' != 'pass' goto MSGSET.SKIP
setlocal indent '    '
;
; Explain what's going on...
setlocal name 'Test MSG_SET'
echo.passfail '${get:indent}${get:name}' 'pass'
;
; GET -> SET, and check they match with a final GET
; We'll accept SUCCESS or CHECKSTATUS
setlocal name 'Send MSG_GET'
dsmentry src ds dg_control dat_capability msg_get '${arg:1},0,0,0'
if '${sts:}' != 'SUCCESS' goto MSGSET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal capability '${ret:}'
setlocal name 'Send MSG_SET with that GET'
if '${getindex:capability:${get:TW_CAPABILITY.ConType}}' == 'TWON_ONEVALUE' goto MSGSET.SET ; ready to go as-is
if '${getindex:capability:${get:TW_CAPABILITY.ConType}}' == 'TWON_ARRAY' goto MSGSET.SET  ; ready to go as-is
if '${getindex:capability:${get:TW_CAPABILITY.ConType}}' == 'TWON_RANGE' goto MSGSET.SETRANGE ; the rest must convert to TW_ONEVALUE
;
increment currentindex '${get:TW_ENUMERATION.ItemList}' '${getindex:capability:${get:TW_ENUMERATION.CurrentIndex}}'
setlocal currentvalue '${getindex:capability:${get:currentindex}}'
if '${get:currentvalue}' contains ',' goto MSGSET.NEEDQUOTES ; if the data has a comma in it, we're going to need quotes
;
setlocal capability '${getindex:capability:${get:TW_CAPABILITY.Cap}},TWON_ONEVALUE,${getindex:capability:${get:TW_ENUMERATION.ItemType}},${get:currentvalue}'
goto MSGSET.SET
;
:MSGSET.NEEDQUOTES
setlocal capability '${getindex:capability:${get:TW_CAPABILITY.Cap}},TWON_ONEVALUE,${getindex:capability:${get:TW_ENUMERATION.ItemType}},"${get:currentvalue}"'
goto MSGSET.SET
;
:MSGSET.SETRANGE
setlocal capability '${getindex:capability:${get:TW_CAPABILITY.Cap}},TWON_ONEVALUE,${getindex:capability:${get:TW_RANGE.ItemType}},${getindex:capability:${get:TW_RANGE.CurrentValue}}'
;
:MSGSET.SET
dsmentry src ds dg_control dat_capability msg_set '${get:capability}'
if '/CHECKSTATUS/SUCCESS/' !~contains '/${sts:}/' goto MSGSET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal name 'Send MSG_GETCURRENTpability msg_getcurrent '${arg:1},0,0,0'
setlocal value '${ret:}'
if '${sts:}' != 'SUCCESS' goto MSGSET.ERROR.ECHOPASSFAIL
if '${get:value}' != '${get:capability}' goto MSGSET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; GETGURRENT -> SET, and check they match with a final GETCURRENT
setlocal name 'Send MSG_GETCURRENT'
dsmentry src ds dg_control dat_capability msg_getcurrent '${arg:1},0,0,0'
if '${sts:}' != 'SUCCESS' goto MSGSET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal capability '${ret:}'
setlocal name 'Send MSG_SET with that GETCURRENT'
dsmentry src ds dg_control dat_capability msg_set '${get:capability}'
if '${sts:}' != 'SUCCESS' goto MSGSET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal name 'Send MSG_GETCURRENT to confirm MSG_SET'
dsmentry src ds dg_control dat_capability msg_getcurrent '${arg:1},0,0,0'
setlocal value '${ret:}'
if '${sts:}' != 'SUCCESS' goto MSGSET.ERROR.ECHOPASSFAIL
if '${get:value}' != '${get:capability}' goto MSGSET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; GETDEFAULT -> SET, and check they match with a final GETCURRENT
setlocal name 'Send MSG_GETDEFAULT'
dsmentry src ds dg_control dat_capability msg_getdefault '${arg:1},0,0,0'
if '${sts:}' != 'SUCCESS' goto MSGSET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal capability '${ret:}'
setlocal name 'Send MSG_SET with that GETDEFAULT'
dsmentry src ds dg_control dat_capability msg_set '${get:capability}'
if '${sts:}' != 'SUCCESS' goto MSGSET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal name 'Send MSG_GETCURRENT to confirm MSG_SET'
dsmentry src ds dg_control dat_capability msg_getcurrent '${arg:1},0,0,0'
setlocal value '${ret:}'
if '${sts:}' != 'SUCCESS' goto MSGSET.ERROR.ECHOPASSFAIL
if '${get:value}' != '${get:capability}' goto MSGSET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; RESET -> SET, and check they match with a final GETCURRENT
setlocal name 'Send MSG_RESET'
dsmentry src ds dg_control dat_capability msg_reset '${arg:1},0,0,0'
if '${sts:}' != 'SUCCESS' goto MSGSET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal capability '${ret:}'
setlocal name 'Send MSG_SET with that RESET'
dsmentry src ds dg_control dat_capability msg_set '${get:capability}'
if '${sts:}' != 'SUCCESS' goto MSGSET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
setlocal name 'Send MSG_GETCURRENT to confirm MSG_SET'
dsmentry src ds dg_control dat_capability msg_getcurrent '${arg:1},0,0,0'
setlocal value '${ret:}'
if '${sts:}' != 'SUCCESS' goto MSGSET.ERROR.ECHOPASSFAIL
if '${get:value}' != '${get:capability}' goto MSGSET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
; All done...
goto MSGSET.PASS
:MSGSET.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'fail ${sts:} <${get:capability}> <${get:value}>'
call RESTORECAPABILITY '${arg:1}'
setglobal '${arg:3}' 'fail'
return
;
:MSGSET.SKIP
return
;
:MSGSET.PASS
call RESTORECAPABILITY '${arg:1}'
return



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: ENABLECAPABILITIES
;   Turn on stuff that we find in the list, we don't care if it fails,
;   we'll keep on going...
;
; Arguments
;   arg:1 - supportedcaps
;
; Globals
;   (none)
;
; Locals
;   (none)
;
; Returns
;   (none)
;
:ENABLECAPABILITIES
setlocal indent '  '
;
; CAP_PRINTERENABLED
:ENABLECAPABILITIES.CAP_PRINTERENABLED
if '${arg:1}' !~contains 'CAP_PRINTERENABLED' goto ENABLECAPABILITIES.ICAP_BARCODEDETECTIONENABLED
dsmentry src ds dg_control dat_capability msg_set 'CAP_PRINTERENABLED,TWON_ONEVALUE,TWTY_BOOL,TRUE'
if '${sts:}' != 'SUCCESS' goto ENABLECAPABILITIES.CAP_PRINTERENABLED.ECHOPASSFAIL
echo.passfail '${get:indent}Enable CAP_PRINTERENABLED' 'pass'
goto ENABLECAPABILITIES.ICAP_BARCODEDETECTIONENABLED
:ENABLECAPABILITIES.CAP_PRINTERENABLED.ECHOPASSFAIL
echo.passfail '${get:indent}Enable CAP_PRINTERENABLED' 'fail (but we won't fail on it here)'
;
; ICAP_BARCODEDETECTIONENABLED
:ENABLECAPABILITIES.ICAP_BARCODEDETECTIONENABLED
if '${arg:1}' !~contains 'ICAP_BARCODEDETECTIONENABLED' goto ENABLECAPABILITIES.ICAP_PATCHCODEDETECTIONENABLED
dsmentry src ds dg_control dat_capability msg_set 'ICAP_BARCODEDETECTIONENABLED,TWON_ONEVALUE,TWTY_BOOL,TRUE'
if '${sts:}' != 'SUCCESS' goto ENABLECAPABILITIES.ICAP_BARCODEDETECTIONENABLED.ECHOPASSFAIL
echo.passfail '${get:indent}Enable ICAP_BARCODEDETECTIONENABLED' 'pass'
goto ENABLECAPABILITIES.ICAP_PATCHCODEDETECTIONENABLED
:ENABLECAPABILITIES.ICAP_BARCODEDETECTIONENABLED.ECHOPASSFAIL
echo.passfail '${get:indent}Enable ICAP_BARCODEDETECTIONENABLED' 'fail (but we won't fail on it here)'
;
; ICAP_PATCHCODEDETECTIONENABLED
:ENABLECAPABILITIES.ICAP_PATCHCODEDETECTIONENABLED
if '${arg:1}' !~contains 'CAP_PATCHCODEDETECTIONENABLED' goto ENABLECAPABILITIES.DONE
dsmentry src ds dg_control dat_capability msg_set 'ICAP_PATCHCODEDETECTIONENABLED,TWON_ONEVALUE,TWTY_BOOL,TRUE'
if '${sts:}' != 'SUCCESS' goto ENABLECAPABILITIES.ICAP_PATCHCODEDETECTIONENABLED.ECHOPASSFAIL
echo.passfail '${get:indent}Enable CAP_PATCHCODEDETECTIONENABLED' 'pass'
goto ENABLECAPABILITIES.DONE
:ENABLECAPABILITIES.ICAP_PATCHCODEDETECTIONENABLED.ECHOPASSFAIL
echo.passfail '${get:indent}Enable CAP_PATCHCODEDETECTIONENABLED' 'fail (but we won't fail on it here)'
;
; All done...
:ENABLECAPABILITIES.DONE
return



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: RESTORECAPABILITY 
;   If we recognize it and need to maintain it, restore it.  Note that to get into
;   this function we're assuming the capability exists, so it's okay to set it.
;   SPECNOTE: the concept of restoring isn't described in the tests
;
; Arguments
;   arg:1 - the current capability
;
; Globals
;   g_pixeltype.value - using it to make life easier
;
; Locals
;   indent - amount to indent echo.passfail
;
; Returns
;   (none)
;
:RESTORECAPABILITY
setlocal indent '  '
if '${arg:1}' == 'CAP_PRINTERENABLED' goto RESTORECAPABILITY.CAP_PRINTERENABLED
if '${arg:1}' == 'ICAP_BARCODEDETECTIONENABLED' goto RESTORECAPABILITY.ICAP_BARCODEDETECTIONENABLED
if '${arg:1}' == 'ICAP_PATCHCODEDETECTIONENABLED' goto RESTORECAPABILITY.ICAP_PATCHCODEDETECTIONENABLED
if '${arg:1}' == 'ICAP_PIXELTYPE' goto RESTORECAPABILITY.ICAP_PIXELTYPE
return
;
; CAP_PRINTERENABLED
:RESTORECAPABILITY.CAP_PRINTERENABLED
dsmentry src ds dg_control dat_capability msg_set 'CAP_PRINTERENABLED,TWON_ONEVALUE,TWTY_BOOL,TRUE'
if '${sts:}' != 'SUCCESS' goto RESTORECAPABILITY.CAP_PRINTERENABLED.ECHOPASSFAIL
echo.passfail '${get:indent}Restore CAP_PRINTERENABLED value to TRUE' 'pass'
return
:RESTORECAPABILITY.CAP_PRINTERENABLED.ECHOPASSFAIL
echo.passfail '${get:indent}Restore CAP_PRINTERENABLED value to TRUE' 'fail (but we won't fail on it here)'
return
;
; ICAP_BARCODEDETECTIONENABLED
:RESTORECAPABILITY.ICAP_BARCODEDETECTIONENABLED
dsmentry src ds dg_control dat_capability msg_set 'ICAP_BARCODEDETECTIONENABLED,TWON_ONEVALUE,TWTY_UINT16,TRUE'
if '${sts:}' != 'SUCCESS' goto RESTORECAPABILITY.ICAP_BARCODEDETECTIONENABLED.ECHOPASSFAIL
echo.passfail '${get:indent}Restore ICAP_BARCODEDETECTIONENABLED value to TRUE' 'pass'
return
:RESTORECAPABILITY.ICAP_BARCODEDETECTIONENABLED.ECHOPASSFAIL
echo.passfail '${get:indent}Restore ICAP_BARCODEDETECTIONENABLED value to TRUE' 'fail (but we won't fail on it here)'
return
;
; ICAP_PATCHCODEDETECTIONENABLED
:RESTORECAPABILITY.ICAP_PATCHCODEDETECTIONENABLED
dsmentry src ds dg_control dat_capability msg_set 'ICAP_PATCHCODEDETECTIONENABLED,TWON_ONEVALUE,TWTY_UINT16,TRUE'
if '${sts:}' != 'SUCCESS' goto RESTORECAPABILITY.ICAP_PATCHCODEDETECTIONENABLED.ECHOPASSFAIL
echo.passfail '${get:indent}Restore ICAP_PATCHCODEDETECTIONENABLED value to TRUE' 'pass'
return
:RESTORECAPABILITY.ICAP_PATCHCODEDETECTIONENABLED.ECHOPASSFAIL
echo.passfail '${get:indent}Restore ICAP_PATCHCODEDETECTIONENABLED value to TRUE' 'fail (but we won't fail on it here)'
return
;
; ICAP_PIXELTYPE
:RESTORECAPABILITY.ICAP_PIXELTYPE
dsmentry src ds dg_control dat_capability msg_set 'ICAP_PIXELTYPE,TWON_ONEVALUE,TWTY_UINT16,${get:g_pixeltype.value}'
if '${sts:}' != 'SUCCESS' goto RESTORECAPABILITY.ICAP_PIXELTYPE.ECHOPASSFAIL
echo.passfail '${get:indent}Restore ICAP_PIXELTYPE value to ${get:g_pixeltype.value}' 'pass'
return
:RESTORECAPABILITY.ICAP_PIXELTYPE.ECHOPASSFAIL
echo.passfail '${get:indent}Restore ICAP_PIXELTYPE value to ${get:g_pixeltype.value}' 'fail (but we won't fail on it here)'
return
