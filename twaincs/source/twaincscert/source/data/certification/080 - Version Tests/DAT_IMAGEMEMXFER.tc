;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DAT_IMAGEMEMXFER
;   Confirm that the data source can respond correctly to different TWAIN version of application
;   and data source manager by attempting to scan using different setups. This tests for hangs and
;   crashes. Use Memory transfer if available. Scan one image without UI. Testing with old DSM is
;   only for 32-bit data sources only.
;
; Arguments
;   arg:1 - TW_IDENTITY.ProductName of scanner to test
;   arg:2 - global for us to update on failure
;   arg:3 - value of ShowUI (TRUE or FALSE)
;   arg:4 - test name for the image folder
;
; Globals
;   (none)
;
; Locals
;   name - current test being done
;   indent - indent the passfail text
;   imageinfo - metadata for the current image
;   imagememxfer - result of DAT_IMAGEMEMXFER call
;   setupmemxfer.preferred - preferred field from DAT_SETUPMEMXFER call
;
;   image.count - count of images from 1
;   image.folder - folder to put the images in
;
;   feederenabled.list - scanner's feederenabled values
;   feederenabled.index - index of feederenabled values
;   feederenabled.value - current feederenabled value
;
;   pixeltype.list - scanner's pixeltype values for this feederenabled
;   pixeltype.index - index of pixeltype values
;   pixeltype.value - current pixeltype value
;
; Returns
;   pass or fail
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize...
;
setlocal indent ''
setlocal image.pointer '0'
setlocal image.count '0'
setlocal image.folder '${folder:certimages}/${arg:4}'
setlocal showui '${arg:3}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Clean the image folder for this test...
;
image cleanfolder '${get:image.folder}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MSG_RESETALL
; If return code is not TWRC_SUCCESS, end with an error
;
setlocal name 'MSG_RESETALL'
dsmentry src ds dg_control dat_capability msg_resetall '0,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get and set ICAP_XFERMECH...
;
setlocal name 'ICAP_XFERMECH MSG_GET'
dsmentry src ds dg_control dat_capability msg_get 'ICAP_XFERMECH,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
if '${ret:}' !~contains 'TWSX_MEMORY' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
setlocal name 'ICAP_XFERMECH MSG_SET TWSX_MEMORY'
dsmentry src ds dg_control dat_capability msg_set 'ICAP_XFERMECH,TWON_ONEVALUE,TWTY_UINT16,TWSX_MEMORY'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get the preferred size for memory transfers, and allocate
; a pointer for the memory transfers...
;
setlocal name 'dg_control/dat_setupmemxfer/msg_get'
dsmentry src ds dg_control dat_setupmemxfer msg_get '0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
setlocal name 'TW_SETUPMEMXFER.Preferred > 0'
setlocal setupmemxfer.preferred '${ret:${get:TW_SETUPMEMXFER.Preferred}}'
if '${get:setupmemxfer.preferred}' <= '0' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
;
setlocal name 'allocate pointer for ${get:setupmemxfer.preferred} bytes'
allocate pointer image.pointer '${get:setupmemxfer.preferred}'
if '${get:image.pointer}' == '0' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Check for paper in the feeder, skip for a flatbed...
;
:MAIN.FEEDERLOADED
dsmentry src ds dg_control dat_capability msg_getcurrent 'CAP_FEEDERENABLED,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.FEEDERLOADED.DONE
if '${ret:${get:TW_ONEVALUE.Item}}' ~~ 'FALSE' goto MAIN.FEEDERLOADED.DONE
dsmentry src ds dg_control dat_capability msg_getcurrent 'CAP_FEEDERLOADED,0,0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.FEEDERLOADED.DONE
if '${ret:${get:TW_ONEVALUE.Item}}' ~~ 'TRUE' goto MAIN.FEEDERLOADED.DONE
echo.prompt
echo.prompt "Place paper in the scanner's feeder."
pause '(press the ENTER key when ready to continue)'
:MAIN.FEEDERLOADED.DONE



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We only need one sheet of paper...
;
setlocal name 'CAP_XFERCOUNT MSG_SET 1'
dsmentry src ds dg_control dat_capability msg_set 'CAP_XFERCOUNT,TWON_ONEVALUE,TWTY_INT16,1'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start scanning...
;
:MAIN.USERINTERFACE
setlocal name 'dg_control/dat_userinterface/msg_enableds'
wait reset
dsmentry src null dg_control dat_userinterface msg_enableds '${get:showui},0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Wait for MSG_XFERREADY, if we don't see it then scoot...
;
setlocal name 'wait ${get:sys_waittimeout} seconds for MSG_XFERREADY'
wait '${get:sys_waittimeout}000'
if '${ret:}' !~contains 'msg_xferready' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Do a memory transfer...
; This little song and dance with the states is so that we can
; start the transfer in state 6 with each new image, but switch
; to state 7 if we need multiple calls to capture the current
; image...
;
; The saved images will be in TIFF format, which includes TIFF
; JPEG (the better form, where a simple TIFF header is added).
;
increment image.count '${get:image.count}' 1
image free memimage
;
:MAIN.IMAGEMEMXFER.NEXT
setlocal name 'dg_image/dat_imagememxfer/msg_get'
dsmentry src ds dg_image dat_imagememxfer msg_get '0,0,0,0,0,0,0,9,${get:setupmemxfer.preferred},${get:image.pointer}'
setlocal imagememxfer '${ret:}'
if '${sts:}' == 'XFERDONE' goto MAIN.IMAGEMEMXFER.XFERDONE
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
;
echo.passfail '${get:indent}${get:name} SUCCESS' 'pass'
image append memimage '${get:imagememxfer}'
goto MAIN.IMAGEMEMXFER.NEXT
;
:MAIN.IMAGEMEMXFER.XFERDONE
echo.passfail '${get:indent}${get:name} XFERDONE' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We need image info to make sense of this data...
;
setlocal name 'dg_image/dat_imageinfo/msg_get'
dsmentry src ds dg_image dat_imageinfo msg_get '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0'
setlocal imageinfo '${ret:}'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Save the image...
;
image append memimage '${get:imagememxfer}'
image addheader memimage '${get:imageinfo}'
image save memimage memory '${get:image.folder}/img${format:D6|${get:image.count}}'
echo.passfail '${get:indent}image <${ret:}>' 'pass'
image free memimage



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; End the transfer, see if we're done...
;
setlocal name 'dg_control/dat_pendingxfers/msg_endxfer'
dsmentry src ds dg_control dat_pendingxfers msg_endxfer '0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'
if '${ret:${get:TW_PENDINGXFERS.Count}}' != '0' goto MAIN.IMAGEMEMXFER.NEXT



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We're out of images, so disable; we'll drop down to MAIN.PASS...
;
setlocal name 'dg_control/dat_userinterface/msg_disableds'
dsmentry src ds dg_control dat_userinterface msg_disableds '0,0'
if '${sts:}' != 'SUCCESS' goto MAIN.ERROR.ECHOPASSFAIL
echo.passfail '${get:indent}${get:name}' 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Summary and cleanup...
;
; We passed...
:MAIN.PASS
image free memimage
free pointer image.pointer
return 'pass'
;
; Ruh-roh...
:MAIN.ERROR.ECHOPASSFAIL
image free memimage
free pointer image.pointer
echo.passfail '${get:indent}${get:name}' 'fail - ${sts:} ${ret:}'
setglobal '${arg:2}' 'fail'
return 'fail'
