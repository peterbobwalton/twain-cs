;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TWAIN Certification Script
;   Run all tests needed to pass TWAIN self-certification.
;
; Arguments
;   arg:1 - TW_IDENTITY.ProductName of scanner to test
;   arg:2 - TW_IDENTITY.Version.Major + '.' + TW_IDENTITY.Version.Minor
;   arg:3 - comma separated list of: all, barcode, imageaddress, patcode, or imagsaddress
;
; Globals
;   g_certifyresult - pass/fail result of all standard tests
;   g_certifytwaindirect - pass/fail result of twain direct badge
;   g_certifyprinting - pass/fail result of printing badge
;   g_certifypatchcode - pass/fail result of patch code badge
;   g_certifybarcode - pass/fail result of barcode badge
;   g_certifyimageaddress - pass/fail result of image address badge
;
; Locals
;   badges - badges to check
;   title - script info
;   twidentity.productname - product name of scanner to test
;
; Returns
;   pass or fail
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize stuff...
;
setlocal title 'TWAIN Certification Script v1.1 02-Sep-2021'
setlocal twidentity.productname '${arg:1}'
setlocal twidentity.version '${arg:2}'
setlocal badges '${arg:3}'
setglobal g_certifyresult 'pass'
setglobal g_certifytwaindirect ''
setglobal g_certifyprinting ''
setglobal g_certifypatchcode ''
setglobal g_certifybarcode ''
setglobal g_certifyimageaddress ''



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize our report...
;
report initialize '${get:twidentity.productname}'
call ECHOANDLOG info '${get:title}'
call ECHOANDLOG info '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
call ECHOANDLOG info 'operating system is ${platform:}'
call ECHOANDLOG info 'program is ${program:}'
call ECHOANDLOG info 'started at ${localtime:yyyy-MM-dd/hh:mm:ss}'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Load our global tables...
;
run '${folder:certification}/LoadTables'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Run all the mains tests...
;
call RUNCERTIFICATION '010 - TWAIN Standard Capability Tests' '${get:twidentity.productname}' g_certifyresult
call RUNCERTIFICATION '020 - Vendor Custom Capability Tests'  '${get:twidentity.productname}' g_certifyresult
call RUNCERTIFICATION '030 - Status Return Tests'             '${get:twidentity.productname}' g_certifyresult
call RUNCERTIFICATION '040 - Stress Tests'                    '${get:twidentity.productname}' g_certifyresult
call RUNCERTIFICATION '050 - Non-UI Image Transfer Tests'     '${get:twidentity.productname}' g_certifyresult
call RUNCERTIFICATION '060 - UI Image Transfer Tests'         '${get:twidentity.productname}' g_certifyresult
call RUNCERTIFICATION '070 - CAP_XFERCOUNT Tests'             '${get:twidentity.productname}' g_certifyresult
call RUNCERTIFICATION '080 - Version Tests'                   '${get:twidentity.productname}' g_certifyresult
call RUNCERTIFICATION '090 - Verify Values for MSG_OPENDS, MSG_RESET, and MSG_RESETALL' '${get:twidentity.productname}' g_certifyresult



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Do the badges...
;
; TWAIN Direct...
if ',${get:badges},' ~contains ',all,' goto MAIN.BADGE.TWAINDIRECT
if ',${get:badges},' ~contains ',twaindirect,' goto MAIN.BADGE.TWAINDIRECT
goto MAIN.BADGE.TWAINDIRECT.SKIP
:MAIN.BADGE.TWAINDIRECT
call RUNCERTIFICATION '100 - TWAIN Direct Badge'               '${get:twidentity.productname}' g_certifytwaindirect
:MAIN.BADGE.TWAINDIRECT.SKIP
;
; Printing...
if ',${get:badges},' ~contains ',all,' goto MAIN.BADGE.PRINTING
if ',${get:badges},' ~contains ',printing,' goto MAIN.BADGE.PRINTING
goto MAIN.BADGE.PRINTING.SKIP
:MAIN.BADGE.PRINTING
call RUNCERTIFICATION '110 - Printing Badge'                   '${get:twidentity.productname}' g_certifyprinting
:MAIN.BADGE.PRINTING.SKIP
;
; Patch Code...
if ',${get:badges},' ~contains ',all,' goto MAIN.BADGE.PATCHCODE
if ',${get:badges},' ~contains ',patchcode,' goto MAIN.BADGE.PATCHCODE
goto MAIN.BADGE.PATCHCODE.SKIP
:MAIN.BADGE.PATCHCODE
call RUNCERTIFICATION '120 - Patch Code Badge'                 '${get:twidentity.productname}' g_certifypatchcode
:MAIN.BADGE.PATCHCODE.SKIP
;
; Barcode...
if ',${get:badges},' ~contains ',all,' goto MAIN.BADGE.BARCODE
if ',${get:badges},' ~contains ',barcode,' goto MAIN.BADGE.BARCODE
goto MAIN.BADGE.BARCODE.SKIP
:MAIN.BADGE.BARCODE
call RUNCERTIFICATION '130 - Barcode Badge'                   '${get:twidentity.productname}' g_certifybarcode
:MAIN.BADGE.BARCODE.SKIP
;
; Image Address...
if ',${get:badges},' ~contains ',all,' goto MAIN.BADGE.IMAGEADDRESS
if ',${get:badges},' ~contains ',imageaddress,' goto MAIN.BADGE.IMAGEADDRESS
goto MAIN.BADGE.IMAGEADDRESS.SKIP
:MAIN.BADGE.IMAGEADDRESS
call RUNCERTIFICATION '140 - Image Address Badge'             '${get:twidentity.productname}' g_certifyimageaddress
:MAIN.BADGE.IMAGEADDRESS.SKIP



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; How did we do?
;
if '${get:g_certifyresult}' != 'pass' goto MAIN.FAIL
call ECHOANDLOG info
call ECHOANDLOG info
call ECHOANDLOG info
call ECHOANDLOG info 'ended at ${localtime:yyyy-MM-dd/hh:mm:ss}'
call ECHOANDLOG info '**************************************'
call ECHOANDLOG info 'The scanner passed TWAIN Certification'
;
if '${get:g_certifytwaindirect}' != 'pass' goto MAIN.TWAINDIRECT.CERTIFY.SKIP
call ECHOANDLOG info 'Badge: TWAIN Direct'
:MAIN.TWAINDIRECT.CERTIFY.SKIP
;
if '${get:g_certifyprinting}' != 'pass' goto MAIN.PRINTING.CERTIFY.SKIP
call ECHOANDLOG info 'Badge: Printing'
:MAIN.PRINTING.CERTIFY.SKIP
;
if '${get:g_certifypatchcode}' != 'pass' goto MAIN.PATCHCODE.CERTIFY.SKIP
call ECHOANDLOG info 'Badge: Patch Code'
:MAIN.PATCHCODE.CERTIFY.SKIP
;
if '${get:g_certifybarcode}' != 'pass' goto MAIN.BARCODE.CERTIFY.SKIP
call ECHOANDLOG info 'Badge: Barcode'
:MAIN.BARCODE.CERTIFY.SKIP
;
if '${get:g_certifyimageaddress}' != 'pass' goto MAIN.IMAGEADDRESS.CERTIFY.SKIP
call ECHOANDLOG info 'Badge: Image Address'
:MAIN.IMAGEADDRESS.CERTIFY.SKIP
;
call ECHOANDLOG info '**************************************'
report save
echo 'report saved to ${report:}'
return 'pass'
;
:MAIN.FAIL
call ECHOANDLOG error
call ECHOANDLOG error
call ECHOANDLOG error
call ECHOANDLOG error 'ended at ${localtime:yyyy-MM-dd/hh:mm:ss}'
call ECHOANDLOG error '********************************************'
call ECHOANDLOG error 'The scanner did not pass TWAIN Certification'
call ECHOANDLOG error '********************************************'
report save
echo 'report saved to ${report:}'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: RunCertification
; arg:1 - folder to run in
; arg:2 - TW_IDENTITY.ProductName of scanner to test
; arg:3 - global value to update on fail
; returns: (none)
;
:RUNCERTIFICATION
;
setglobal ${arg:3} 'pass' ; assume pass
cd '${folder:certification}/${arg:1}'
run Certification '${arg:2}' '${arg:3}'
cd '${folder:certification}'
return 'pass'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: Certify
; arg:1 - script to run
; arg:2 - TW_IDENTITY.ProductName of scanner to test
; arg:3 - global value to update on fail
; returns: (none)
;
:CERTIFY
;
run '${arg:1}' '${arg:2}'
if '${ret:}' != 'pass' goto CERTIFY.FAIL
return 'pass'
;
:CERTIFY.FAIL
setglobal '${arg:3}' 'fail'
return 'fail'



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: EchoAndLog
; arg:1 - severity (normal, info, error)
; arg:2 - text
; returns: (none)
;
:ECHOANDLOG
;
if '${arg:1}' == 'info' goto ECHOANDLOG.INFO
echo.red '${arg:2}'
log error '#${arg:2}'
return
:ECHOANDLOG.INFO
echo.green '${arg:2}'
log info '#${arg:2}'
:ECHOANDLOG.ERROR
return
